<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Generated by Ease, Copyright (c) 2024 HDL Works B.V. -->
<svg version="1.1"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xml:space="preserve"
  viewBox="0 0 76800 57600">

   <line x1="0" y1="0" x2="76800" y2="0" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="76800" y1="0" x2="76800" y2="57600" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="76800" y1="57600" x2="0" y2="57600" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="0" y1="57600" x2="0" y2="0" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="74496" y1="57216" x2="76800" y2="57216" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="76800" y1="57216" x2="76800" y2="57600" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="76800" y1="57600" x2="74496" y2="57600" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="74496" y1="57600" x2="74496" y2="57216" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="74496" y1="57344" x2="76800" y2="57344" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="74496" y1="57472" x2="76800" y2="57472" stroke="rgb(0,0,0)" stroke-width="3"/>
   <line x1="75264" y1="57472" x2="75264" y2="57600" stroke="rgb(0,0,0)" stroke-width="3"/>
   <g transform="translate(74528,57299)">
   <text font-family="" font-size="64" fill="rgb(0,0,0)" text-anchor="start">Architecture: design.internal_connections.behavioral</text>
   </g>
   <g transform="translate(74528,57427)">
   <text font-family="" font-size="64" fill="rgb(0,0,0)" text-anchor="start">Designer: </text>
   </g>
   <g transform="translate(74528,57555)">
   <text font-family="" font-size="64" fill="rgb(0,0,0)" text-anchor="start">Date: Dec 13 2024</text>
   </g>
   <polyline points="224,26080 224,26144 288,26112 224,26080"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : clock
Mode    : input
Type    : std_logic
Comment : Core signals (2 bits)
Comment : Core signals (2 bits)
Net     : clock</title></polyline>
   <line x1="288" y1="26112" x2="320" y2="26112" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,26112)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="320,26080 400,26080 448,26112 400,26144 320,26144 320,26080"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <polyline points="224,26208 224,26272 288,26240 224,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : resetbar
Mode : input
Type : std_logic
Net  : resetbar</title></polyline>
   <line x1="288" y1="26240" x2="320" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="320,26208 400,26208 448,26240 400,26272 320,26272 320,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <polyline points="224,26336 224,26400 288,26368 224,26336"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : debug_clk
Mode    : input
Type    : std_logic
Comment : Unified debug interface (48 bits total)
Comment : Unified debug interface (48 bits total)
Net     : debug_clk</title></polyline>
   <line x1="288" y1="26368" x2="320" y2="26368" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_clk</text>
   </g>
   <polyline points="320,26336 400,26336 448,26368 400,26400 320,26400 320,26336"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : debug_clk
Net        : debug_clk
Type       : std_logic
Comment    : Unified debug interface (48 bits total)
HDL object : input port -&gt; debug_clk
Driver     : debug_clk
Receiver   : instruction_memory_inst.debug_clk
Receiver   : REGFILE_INST.debug_clk
Receiver   : DATA_MEMORY_INST.debug_clk
Receiver   : Proc0.debug_clk</title></polyline>
   <polyline points="224,26848 224,26912 288,26880 224,26848"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : debug_addr
Mode    : input
Type    : std_logic_vector(6 downto 0)
Comment : 7 bits (128 addresses)
Comment : 7 bits (128 addresses)
Net     : debug_addr</title></polyline>
   <line x1="288" y1="26880" x2="320" y2="26880" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,26880)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_addr(6:0)</text>
   </g>
   <polyline points="77024,27648 77056,27680 77088,27648 77056,27616 77024,27648"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : debug_data
Mode : inout
Type : std_logic_vector(31 downto 0)
Net  : debug_data</title></polyline>
   <line x1="77024" y1="27648" x2="76992" y2="27648" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(77120,27648)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_data(31:0)</text>
   </g>
   <polyline points="224,26976 224,27040 288,27008 224,26976"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : rf_enable
Mode    : input
Type    : std_logic
Comment : Register File read enable
Comment : Register File read enable
Net     : rf_enable</title></polyline>
   <line x1="288" y1="27008" x2="320" y2="27008" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,27008)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rf_enable</text>
   </g>
   <polyline points="224,28000 224,28064 288,28032 224,28000"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : im_enable
Mode    : input
Type    : std_logic
Comment : Instruction Memory write enable
Comment : Instruction Memory write enable
Net     : im_enable</title></polyline>
   <line x1="288" y1="28032" x2="320" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">im_enable</text>
   </g>
   <polyline points="224,27232 224,27296 288,27264 224,27232"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : dm_enable
Mode    : input
Type    : std_logic
Comment : Data Memory read enable
Comment : Data Memory read enable
Net     : dm_enable</title></polyline>
   <line x1="288" y1="27264" x2="320" y2="27264" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(192,27264)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">dm_enable</text>
   </g>
   <a href="design_pc_mux_behavioral_vsipb801.htm" target="_top">

   <rect x="55232" y="28800" width="2816" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : pc_mux_inst
Entity      : pc_mux
Bound arch. : behavioral(V)
External    : No
Comment     : --TO WRITEBACK MUX</title></rect>
    </a>

   <g transform="translate(55232,28742)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">pc_mux_inst:pc_mux:behavioral(V)</text>
   </g>
   <polyline points="55200,28896 55200,28960 55264,28928 55200,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : branch
Mode          : input
Type          : std_logic
Comment       : control
On sens. list : no
Comment       : control
Net           : branchand_jumpbranchselect_to_pc_mux</title></polyline>
   <line x1="55200" y1="28928" x2="55168" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(55296,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">branch</text>
   </g>
   <polyline points="55200,29024 55200,29088 55264,29056 55200,29024"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : earlybranchcontrolunit
Mode          : input
Type          : std_logic
Comment       : control
On sens. list : no
Comment       : control
Net           : controlunit_earlybranch_to_pcmux</title></polyline>
   <line x1="55200" y1="29056" x2="55168" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(55296,29056)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">earlybranchcontrolunit</text>
   </g>
   <polyline points="55200,29152 55200,29216 55264,29184 55200,29152"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcplus4
Mode          : input
Type          : std_logic_vector(15 downto 0)
On sens. list : no
Net           : pc4adder_pcplus4_to_pc_mux</title></polyline>
   <line x1="55200" y1="29184" x2="55168" y2="29184" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(55296,29184)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcplus4(15:0)</text>
   </g>
   <polyline points="55200,29280 55200,29344 55264,29312 55200,29280"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcplusimm
Mode          : input
Type          : std_logic_vector(15 downto 0)
On sens. list : no
Net           : pcplusimmadder_pcplusimm_to_pc_mux</title></polyline>
   <line x1="55200" y1="29312" x2="55168" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(55296,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcplusimm(15:0)</text>
   </g>
   <polyline points="58016,28896 58016,28960 58080,28928 58016,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcsource
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pc_mux_pcsource_to_pc</title></polyline>
   <line x1="58080" y1="28928" x2="58112" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(57984,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcsource(15:0)</text>
   </g>
   <a href="design_pc4adder_rtl_s4hg1rrl.htm" target="_top">

   <rect x="51968" y="26112" width="1792" height="320"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : pc_4_adder_instance
Entity      : pc4adder
Bound arch. : rtl(V)
External    : No
Comment     : TO PC 4 ADDER</title></rect>
    </a>

   <g transform="translate(51968,26054)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">pc_4_adder_instance:pc4adder:rtl(V)</text>
   </g>
   <polyline points="51936,26208 51936,26272 52000,26240 51936,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcout
Mode          : input
Type          : std_logic_vector(15 downto 0)
On sens. list : no
Net           : pc_pcout_to_pc4adder</title></polyline>
   <line x1="51936" y1="26240" x2="51904" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(52032,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcout(15:0)</text>
   </g>
   <polyline points="53728,26208 53728,26272 53792,26240 53728,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcplus4
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pc4adder_pcplus4_to_pc_mux</title></polyline>
   <line x1="53792" y1="26240" x2="53824" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(53696,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcplus4(15:0)</text>
   </g>
   <a href="design_program_counter_rtl_dmt0s558.htm" target="_top">

   <rect x="59008" y="28416" width="1920" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : pc_instance
Entity      : program_counter
Bound arch. : rtl(V)
External    : No
Comment     : TO PC</title></rect>
    </a>

   <g transform="translate(59008,28358)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">pc_instance:program_counter:rtl(V)</text>
   </g>
   <polyline points="58976,28512 58976,28576 59040,28544 58976,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : std_logic
On sens. list : no
Net           : clock</title></polyline>
   <line x1="58976" y1="28544" x2="58944" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(59072,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="58944,28576 58864,28576 58816,28544 58864,28512 58944,28512 58944,28576"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(58752,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="58976,28640 58976,28704 59040,28672 58976,28640"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : reset
Mode          : input
Type          : std_logic
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="58976" y1="28672" x2="58944" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(59072,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">reset</text>
   </g>
   <polyline points="58944,28704 58864,28704 58816,28672 58864,28640 58944,28640 58944,28704"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(58752,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="58976,28768 58976,28832 59040,28800 58976,28768"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcwrite
Mode          : input
Type          : std_logic
On sens. list : no
Net           : hazardunit_pcwrite_to_pc</title></polyline>
   <line x1="58976" y1="28800" x2="58944" y2="28800" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(59072,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcwrite</text>
   </g>
   <polyline points="58976,28896 58976,28960 59040,28928 58976,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcsource
Mode          : input
Type          : std_logic_vector(15 downto 0)
On sens. list : no
Net           : pc_mux_pcsource_to_pc</title></polyline>
   <line x1="58976" y1="28928" x2="58944" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(59072,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcsource(15:0)</text>
   </g>
   <polyline points="60896,28512 60896,28576 60960,28544 60896,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcout
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pc_pcout_to_instruction_memory</title></polyline>
   <line x1="60960" y1="28544" x2="60992" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(60864,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcout(15:0)</text>
   </g>
   <a href="design_instruction_memory_Behavioral_jvho0dt6.htm" target="_top">

   <rect x="62208" y="28416" width="2176" height="768"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : instruction_memory_inst
Entity      : instruction_memory
Bound arch. : Behavioral(V)
External    : No
Comment     : TO INSTRUCTION MEMORY</title></rect>
    </a>

   <g transform="translate(62208,28358)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">instruction_memory_inst:instruction_memory:Behavioral(V)</text>
   </g>
   <polyline points="62176,28512 62176,28576 62240,28544 62176,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pc_address
Mode          : input
Type          : STD_LOGIC_VECTOR(15 downto 0)
On sens. list : no
Net           : pc_pcout_to_instruction_memory</title></polyline>
   <line x1="62176" y1="28544" x2="62144" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(62272,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pc_address(15:0)</text>
   </g>
   <polyline points="62176,28640 62176,28704 62240,28672 62176,28640"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : reset
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="62176" y1="28672" x2="62144" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(62272,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">reset</text>
   </g>
   <polyline points="62144,28704 62064,28704 62016,28672 62064,28640 62144,28640 62144,28704"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(61952,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="64352,28512 64352,28576 64416,28544 64352,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : instruction
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : instruction_memory_instruction_to_ifid</title></polyline>
   <line x1="64416" y1="28544" x2="64448" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(64320,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="62176,28768 62176,28832 62240,28800 62176,28768"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_clk
Mode          : input
Type          : STD_LOGIC
Comment       : Debug interface with reduced ports
On sens. list : no
Comment       : Debug interface with reduced ports
Net           : debug_clk</title></polyline>
   <line x1="62176" y1="28800" x2="62144" y2="28800" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(62272,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_clk</text>
   </g>
   <polyline points="62144,28832 62064,28832 62016,28800 62064,28768 62144,28768 62144,28832"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : debug_clk
Net        : debug_clk
Type       : std_logic
Comment    : Unified debug interface (48 bits total)
HDL object : input port -&gt; debug_clk
Driver     : debug_clk
Receiver   : instruction_memory_inst.debug_clk
Receiver   : REGFILE_INST.debug_clk
Receiver   : DATA_MEMORY_INST.debug_clk
Receiver   : Proc0.debug_clk</title></polyline>
   <polyline points="62176,28896 62176,28960 62240,28928 62176,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_addr
Mode          : input
Type          : STD_LOGIC_VECTOR(6 downto 0)
Comment       : Reduced to 7 bits for 128 entries
On sens. list : no
Comment       : Reduced to 7 bits for 128 entries
Net           : debug_addr</title></polyline>
   <line x1="62176" y1="28928" x2="62144" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(62272,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_addr(6:0)</text>
   </g>
   <polyline points="64352,28672 64384,28704 64416,28672 64384,28640 64352,28672"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_data
Mode          : inout
Type          : STD_LOGIC_VECTOR(31 downto 0)
Comment       : Bidirectional data bus
On sens. list : no
Comment       : Bidirectional data bus
Net           : debug_data</title></polyline>
   <line x1="64416" y1="28672" x2="64448" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(64320,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_data(31:0)</text>
   </g>
   <polyline points="62176,29024 62176,29088 62240,29056 62176,29024"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_we
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : im_enable</title></polyline>
   <line x1="62176" y1="29056" x2="62144" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(62272,29056)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_we</text>
   </g>
   <a href="design_ifid_Behavioral_66nl18p4.htm" target="_top">

   <rect x="65728" y="27648" width="3072" height="1024"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : ifid_instance
Entity      : ifid
Bound arch. : Behavioral(V)
External    : No
Comment     : TO IFID</title></rect>
    </a>

   <g transform="translate(65728,27590)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">ifid_instance:ifid:Behavioral(V)</text>
   </g>
   <polyline points="65696,27744 65696,27808 65760,27776 65696,27744"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : clock</title></polyline>
   <line x1="65696" y1="27776" x2="65664" y2="27776" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="65664,27808 65584,27808 65536,27776 65584,27744 65664,27744 65664,27808"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(65472,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="65696,27872 65696,27936 65760,27904 65696,27872"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rstbar
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="65696" y1="27904" x2="65664" y2="27904" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rstbar</text>
   </g>
   <polyline points="65664,27936 65584,27936 65536,27904 65584,27872 65664,27872 65664,27936"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(65472,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="65696,28000 65696,28064 65760,28032 65696,28000"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ifidwrite
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : hazardunit_ifidwrite_to_ifid</title></polyline>
   <line x1="65696" y1="28032" x2="65664" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ifidwrite</text>
   </g>
   <polyline points="65696,28128 65696,28192 65760,28160 65696,28128"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ifidflush
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : controlunit_ifflush_to_ifid</title></polyline>
   <line x1="65696" y1="28160" x2="65664" y2="28160" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,28160)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ifidflush</text>
   </g>
   <polyline points="65696,28256 65696,28320 65760,28288 65696,28256"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : branch_taken
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : branchand_jumpbranchselect_to_pc_mux</title></polyline>
   <line x1="65696" y1="28288" x2="65664" y2="28288" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,28288)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">branch_taken</text>
   </g>
   <polyline points="65696,28384 65696,28448 65760,28416 65696,28384"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcout
Mode          : input
Type          : STD_LOGIC_VECTOR(15 downto 0)
On sens. list : no
Net           : pc_pcout_to_ifid</title></polyline>
   <line x1="65696" y1="28416" x2="65664" y2="28416" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,28416)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcout(15:0)</text>
   </g>
   <polyline points="65696,28512 65696,28576 65760,28544 65696,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instruction
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : instruction_memory_instruction_to_ifid</title></polyline>
   <line x1="65696" y1="28544" x2="65664" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(65792,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="68768,27744 68768,27808 68832,27776 68768,27744"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifidinstructionout
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : ifid_instruction_to_OUT</title></polyline>
   <line x1="68832" y1="27776" x2="68864" y2="27776" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(68736,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifidinstructionout(31:0)</text>
   </g>
   <polyline points="68864,27744 68944,27744 68992,27776 68944,27808 68864,27808 68864,27744"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : ifid_instruction_to_OUT
Net        : ifid_instruction_to_OUT
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; ifid_instruction_to_OUT
Driver     : ifid_instance.ifidinstructionout
Receiver   : CONTROLUNIT_INST.instruction
Receiver   : HAZARD_UNIT_INST.instruction
Receiver   : IDEX_INST.instructionin
Receiver   : concurrent0.ifid_instruction_to_OUT</title></polyline>
   <g transform="translate(69056,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ifid_instruction_to_OUT</text>
   </g>
   <polyline points="68768,27872 68768,27936 68832,27904 68768,27872"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifidpcout
Mode : output
Type : STD_LOGIC_VECTOR(15 downto 0)
Net  : ifid_pcout_to_OUT</title></polyline>
   <line x1="68832" y1="27904" x2="68864" y2="27904" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(68736,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifidpcout(15:0)</text>
   </g>
   <polyline points="68768,28000 68768,28064 68832,28032 68768,28000"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rs1_out
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : ifid_rs1_to_register</title></polyline>
   <line x1="68832" y1="28032" x2="68864" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(68736,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rs1_out(4:0)</text>
   </g>
   <polyline points="68768,28128 68768,28192 68832,28160 68768,28128"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rs2_out
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : ifid_rs2_to_register</title></polyline>
   <line x1="68832" y1="28160" x2="68864" y2="28160" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(68736,28160)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rs2_out(4:0)</text>
   </g>
   <polyline points="68768,28256 68768,28320 68832,28288 68768,28256"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rd_out
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : ifid_rd_to_idex</title></polyline>
   <line x1="68832" y1="28288" x2="68864" y2="28288" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(68736,28288)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rd_out(4:0)</text>
   </g>
   <a href="design_ImmGen_Behavioral_i5kn5qcp.htm" target="_top">

   <rect x="48704" y="29312" width="2176" height="384"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : imm_gen_inst
Entity      : ImmGen
Bound arch. : Behavioral(V)
External    : No</title></rect>
    </a>

   <g transform="translate(48704,29254)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">imm_gen_inst:ImmGen:Behavioral(V)</text>
   </g>
   <polyline points="48672,29408 48672,29472 48736,29440 48672,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instruction
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : ifid_instruction_to_immediategen</title></polyline>
   <line x1="48672" y1="29440" x2="48640" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(48768,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="50848,29408 50848,29472 50912,29440 50848,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcadderimm
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : immediategen_immediate_to_pcimmadder</title></polyline>
   <line x1="50912" y1="29440" x2="50944" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(50816,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcadderimm(31:0)</text>
   </g>
   <polyline points="50848,29536 50848,29600 50912,29568 50848,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : immediate
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : immediategen_immediate_to_idex</title></polyline>
   <line x1="50912" y1="29568" x2="50944" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(50816,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">immediate(31:0)</text>
   </g>
   <a href="design_pcimmadder_behavior_e8coqg44.htm" target="_top">

   <rect x="51968" y="29184" width="2048" height="384"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : pcimmadder_inst
Entity      : pcimmadder
Bound arch. : behavior(V)
External    : No</title></rect>
    </a>

   <g transform="translate(51968,29126)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">pcimmadder_inst:pcimmadder:behavior(V)</text>
   </g>
   <polyline points="51936,29280 51936,29344 52000,29312 51936,29280"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pc
Mode          : input
Type          : std_logic_vector(15 downto 0)
On sens. list : no
Net           : ifid_pcout_to_pcimmadder</title></polyline>
   <line x1="51936" y1="29312" x2="51904" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(52032,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pc(15:0)</text>
   </g>
   <polyline points="51936,29408 51936,29472 52000,29440 51936,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : immediate
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : immediategen_immediate_to_pcimmadder</title></polyline>
   <line x1="51936" y1="29440" x2="51904" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(52032,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">immediate(31:0)</text>
   </g>
   <polyline points="53984,29280 53984,29344 54048,29312 53984,29280"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcplusimm
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pcplusimmadder_pcplusimm_to_pc_mux</title></polyline>
   <line x1="54048" y1="29312" x2="54080" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(53952,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcplusimm(15:0)</text>
   </g>
   <a href="design_regfile_Behavioral_f3c1cqsk.htm" target="_top">

   <rect x="70848" y="27648" width="3200" height="1280"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : REGFILE_INST
Entity      : regfile
Bound arch. : Behavioral(V)
External    : No
Comment     : REGISTER FILE</title></rect>
    </a>

   <g transform="translate(70848,27590)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">REGFILE_INST:regfile:Behavioral(V)</text>
   </g>
   <polyline points="70816,27744 70816,27808 70880,27776 70816,27744"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : resetbar
Mode          : input
Type          : std_logic
Comment       : Original ports
On sens. list : no
Comment       : Original ports
Net           : resetbar</title></polyline>
   <line x1="70816" y1="27776" x2="70784" y2="27776" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="70784,27808 70704,27808 70656,27776 70704,27744 70784,27744 70784,27808"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <polyline points="70816,27872 70816,27936 70880,27904 70816,27872"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : regwrite
Mode          : input
Type          : std_logic
On sens. list : no
Net           : memwb_regwrite_to_registers</title></polyline>
   <line x1="70816" y1="27904" x2="70784" y2="27904" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">regwrite</text>
   </g>
   <polyline points="70816,28000 70816,28064 70880,28032 70816,28000"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readregister1
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : ifid_rs1_to_register</title></polyline>
   <line x1="70816" y1="28032" x2="70784" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readregister1(4:0)</text>
   </g>
   <polyline points="70816,28128 70816,28192 70880,28160 70816,28128"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readregister2
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : ifid_rs2_to_register</title></polyline>
   <line x1="70816" y1="28160" x2="70784" y2="28160" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28160)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readregister2(4:0)</text>
   </g>
   <polyline points="70816,28256 70816,28320 70880,28288 70816,28256"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : writeregisteraddress
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : memwb_rd_to_out</title></polyline>
   <line x1="70816" y1="28288" x2="70784" y2="28288" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28288)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">writeregisteraddress(4:0)</text>
   </g>
   <polyline points="70816,28384 70816,28448 70880,28416 70816,28384"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : writedata
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : writebackmux_writedata_to_registers</title></polyline>
   <line x1="70816" y1="28416" x2="70784" y2="28416" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28416)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">writedata(31:0)</text>
   </g>
   <polyline points="70784,28448 70704,28448 70656,28416 70704,28384 70784,28384 70784,28448"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : writebackmux_writedata_to_registers
Net        : writebackmux_writedata_to_registers
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; writebackmux_writedata_to_registers
Driver     : WRITEBACK_MUX_INST.writebackdata
Receiver   : REGFILE_INST.writedata
Receiver   : CONTROLUNIT_INST.memwb_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1memwb
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2memwb</title></polyline>
   <g transform="translate(70592,28416)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">writebackmux_writedata_to_registers</text>
   </g>
   <polyline points="74016,27744 74016,27808 74080,27776 74016,27744"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata1
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : registers_reg1out_to_idex</title></polyline>
   <line x1="74080" y1="27776" x2="74112" y2="27776" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(73984,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata1(31:0)</text>
   </g>
   <polyline points="74016,27872 74016,27936 74080,27904 74016,27872"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata2
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : registers_reg2out_to_idex</title></polyline>
   <line x1="74080" y1="27904" x2="74112" y2="27904" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(73984,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata2(31:0)</text>
   </g>
   <polyline points="70816,28512 70816,28576 70880,28544 70816,28512"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_clk
Mode          : input
Type          : std_logic
Comment       : Debug ports
On sens. list : no
Comment       : Debug ports
Net           : debug_clk</title></polyline>
   <line x1="70816" y1="28544" x2="70784" y2="28544" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_clk</text>
   </g>
   <polyline points="70784,28576 70704,28576 70656,28544 70704,28512 70784,28512 70784,28576"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : debug_clk
Net        : debug_clk
Type       : std_logic
Comment    : Unified debug interface (48 bits total)
HDL object : input port -&gt; debug_clk
Driver     : debug_clk
Receiver   : instruction_memory_inst.debug_clk
Receiver   : REGFILE_INST.debug_clk
Receiver   : DATA_MEMORY_INST.debug_clk
Receiver   : Proc0.debug_clk</title></polyline>
   <polyline points="70816,28640 70816,28704 70880,28672 70816,28640"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_address
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : debug_addr
Net slice:    : 4 downto 0</title></polyline>
   <line x1="70816" y1="28672" x2="70784" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <circle cx="70808" cy="28672" r="16"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_address(4:0)</text>
   </g>
   <g transform="translate(70784,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="ideographic">(4 downto 0)</text>
   </g>
   <polyline points="70816,28768 70816,28832 70880,28800 70816,28768"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_read_enable
Mode          : input
Type          : std_logic
On sens. list : no
Net           : rf_enable</title></polyline>
   <line x1="70816" y1="28800" x2="70784" y2="28800" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(70912,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_read_enable</text>
   </g>
   <polyline points="74016,28032 74048,28064 74080,28032 74048,28000 74016,28032"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_data
Mode          : inout
Type          : std_logic_vector(31 downto 0)
Comment       : Changed to inout
On sens. list : no
Comment       : Changed to inout
Net           : rf_data_out</title></polyline>
   <line x1="74080" y1="28032" x2="74112" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(73984,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_data(31:0)</text>
   </g>
   <a href="design_ControlUnit_Behavioral_sc25vidu.htm" target="_top">

   <rect x="5120" y="29440" width="2432" height="1280"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : CONTROLUNIT_INST
Entity      : ControlUnit
Bound arch. : Behavioral(V)
External    : No
Comment     : TO CONTROL UNIT</title></rect>
    </a>

   <g transform="translate(5120,29382)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">CONTROLUNIT_INST:ControlUnit:Behavioral(V)</text>
   </g>
   <polyline points="5088,29536 5088,29600 5152,29568 5088,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instruction
Mode          : input
Type          : std_logic_vector(31 downto 0)
Comment       : Inputs
On sens. list : no
Comment       : Inputs
Net           : ifid_instruction_to_OUT</title></polyline>
   <line x1="5088" y1="29568" x2="5056" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="5056,29600 4976,29600 4928,29568 4976,29536 5056,29536 5056,29600"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : ifid_instruction_to_OUT
Net        : ifid_instruction_to_OUT
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; ifid_instruction_to_OUT
Driver     : ifid_instance.ifidinstructionout
Receiver   : CONTROLUNIT_INST.instruction
Receiver   : HAZARD_UNIT_INST.instruction
Receiver   : IDEX_INST.instructionin
Receiver   : concurrent0.ifid_instruction_to_OUT</title></polyline>
   <g transform="translate(4864,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifid_instruction_to_OUT</text>
   </g>
   <polyline points="5088,29664 5088,29728 5152,29696 5088,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : cntrlsigmux
Mode          : input
Type          : std_logic
On sens. list : no
Net           : hazardunit_cntrlsigmux_to_controlunit</title></polyline>
   <line x1="5088" y1="29696" x2="5056" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">cntrlsigmux</text>
   </g>
   <polyline points="5088,29792 5088,29856 5152,29824 5088,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs1_data
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : registers_reg1out_to_controlunit</title></polyline>
   <line x1="5088" y1="29824" x2="5056" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs1_data(31:0)</text>
   </g>
   <polyline points="5088,29920 5088,29984 5152,29952 5088,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs2_data
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : registers_reg2out_to_controlunit</title></polyline>
   <line x1="5088" y1="29952" x2="5056" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs2_data(31:0)</text>
   </g>
   <polyline points="5088,30048 5088,30112 5152,30080 5088,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : exmem_rd
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : exmem_rd_to_memwb</title></polyline>
   <line x1="5088" y1="30080" x2="5056" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">exmem_rd(4:0)</text>
   </g>
   <polyline points="5088,30176 5088,30240 5152,30208 5088,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : exmem_regdata
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : exmem_result_to_datamem</title></polyline>
   <line x1="5088" y1="30208" x2="5056" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">exmem_regdata(31:0)</text>
   </g>
   <polyline points="5056,30240 4976,30240 4928,30208 4976,30176 5056,30176 5056,30240"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(4864,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="5088,30304 5088,30368 5152,30336 5088,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memwb_rd
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : memwb_rd_to_out</title></polyline>
   <line x1="5088" y1="30336" x2="5056" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memwb_rd(4:0)</text>
   </g>
   <polyline points="5088,30432 5088,30496 5152,30464 5088,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memwb_regdata
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : writebackmux_writedata_to_registers</title></polyline>
   <line x1="5088" y1="30464" x2="5056" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memwb_regdata(31:0)</text>
   </g>
   <polyline points="5056,30496 4976,30496 4928,30464 4976,30432 5056,30432 5056,30496"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : writebackmux_writedata_to_registers
Net        : writebackmux_writedata_to_registers
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; writebackmux_writedata_to_registers
Driver     : WRITEBACK_MUX_INST.writebackdata
Receiver   : REGFILE_INST.writedata
Receiver   : CONTROLUNIT_INST.memwb_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1memwb
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2memwb</title></polyline>
   <g transform="translate(4864,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">writebackmux_writedata_to_registers</text>
   </g>
   <polyline points="7520,29536 7520,29600 7584,29568 7520,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemtoReg
Mode    : output
Type    : std_logic
Comment : -- Outputs      
Comment : -- Outputs      
Net     : controlunit_memtoreg_to_idex</title></polyline>
   <line x1="7584" y1="29568" x2="7616" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemtoReg</text>
   </g>
   <polyline points="7520,29664 7520,29728 7584,29696 7520,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : RegWrite
Mode : output
Type : std_logic
Net  : controlunit_regwrite_to_idex</title></polyline>
   <line x1="7584" y1="29696" x2="7616" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">RegWrite</text>
   </g>
   <polyline points="7520,29792 7520,29856 7584,29824 7520,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemRead
Mode    : output
Type    : std_logic
Comment : M
Comment : M
Net     : controlunit_memread_to_idex</title></polyline>
   <line x1="7584" y1="29824" x2="7616" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemRead</text>
   </g>
   <polyline points="7520,29920 7520,29984 7584,29952 7520,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MemWrite
Mode : output
Type : std_logic
Net  : controlunit_memwrite_to_idex</title></polyline>
   <line x1="7584" y1="29952" x2="7616" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemWrite</text>
   </g>
   <polyline points="7520,30048 7520,30112 7584,30080 7520,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : Branch
Mode : output
Type : std_logic
Net  : controlunit_branch_to_idex</title></polyline>
   <line x1="7584" y1="30080" x2="7616" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">Branch</text>
   </g>
   <polyline points="7520,30176 7520,30240 7584,30208 7520,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : ALUSrc
Mode    : output
Type    : std_logic
Comment : EX
Comment : EX
Net     : controlunit_alusource_to_idex</title></polyline>
   <line x1="7584" y1="30208" x2="7616" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ALUSrc</text>
   </g>
   <polyline points="7520,30304 7520,30368 7584,30336 7520,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ALUOp
Mode : output
Type : std_logic_vector(1 downto 0)
Net  : contolunit_aluop_to_idex</title></polyline>
   <line x1="7584" y1="30336" x2="7616" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ALUOp(1:0)</text>
   </g>
   <polyline points="7520,30432 7520,30496 7584,30464 7520,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : if_flush
Mode    : output
Type    : std_logic
Comment : New output for early branch resolution
Comment : New output for early branch resolution
Net     : controlunit_ifflush_to_ifid</title></polyline>
   <line x1="7584" y1="30464" x2="7616" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">if_flush</text>
   </g>
   <polyline points="7520,30560 7520,30624 7584,30592 7520,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : early_branch
Mode : output
Type : std_logic
Net  : controlunit_earlybranch_to_pcmux</title></polyline>
   <line x1="7584" y1="30592" x2="7616" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(7488,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">early_branch</text>
   </g>
   <polyline points="5088,30560 5088,30624 5152,30592 5088,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ctrl_disable
Mode          : input
Type          : std_logic
Comment       : input to deal with rare lockup condition
On sens. list : no
Comment       : input to deal with rare lockup condition
Net           : hazardunit_controldisable_to_controlunit</title></polyline>
   <line x1="5088" y1="30592" x2="5056" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(5184,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ctrl_disable</text>
   </g>
   <a href="design_hazard_unit_Behavioral_4sp5hjte.htm" target="_top">

   <rect x="1472" y="30080" width="2176" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : HAZARD_UNIT_INST
Entity      : hazard_unit
Bound arch. : Behavioral(V)
External    : No
Comment     : -- NEED TO ADD THE EXMEM AND MEMWB forwarding signals !!! logic is implenented </title></rect>
    </a>

   <g transform="translate(1472,30022)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">HAZARD_UNIT_INST:hazard_unit:Behavioral(V)</text>
   </g>
   <polyline points="1440,30176 1440,30240 1504,30208 1440,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : idexmemread
Mode          : input
Type          : std_logic
On sens. list : no
Net           : idex_memread_to_exmem</title></polyline>
   <line x1="1440" y1="30208" x2="1408" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(1536,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">idexmemread</text>
   </g>
   <polyline points="1440,30304 1440,30368 1504,30336 1440,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : idexrd
Mode          : input
Type          : std_logic_vector(4 downto 0)
On sens. list : no
Net           : idex_rd_to_exmem</title></polyline>
   <line x1="1440" y1="30336" x2="1408" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(1536,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">idexrd(4:0)</text>
   </g>
   <polyline points="1440,30432 1440,30496 1504,30464 1440,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instruction
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : ifid_instruction_to_OUT</title></polyline>
   <line x1="1440" y1="30464" x2="1408" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(1536,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="1408,30496 1328,30496 1280,30464 1328,30432 1408,30432 1408,30496"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : ifid_instruction_to_OUT
Net        : ifid_instruction_to_OUT
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; ifid_instruction_to_OUT
Driver     : ifid_instance.ifidinstructionout
Receiver   : CONTROLUNIT_INST.instruction
Receiver   : HAZARD_UNIT_INST.instruction
Receiver   : IDEX_INST.instructionin
Receiver   : concurrent0.ifid_instruction_to_OUT</title></polyline>
   <g transform="translate(1216,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifid_instruction_to_OUT</text>
   </g>
   <polyline points="3616,30176 3616,30240 3680,30208 3616,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : cntrlsigmux
Mode : output
Type : std_logic
Net  : hazardunit_controlsigmux_to_controlunit</title></polyline>
   <line x1="3680" y1="30208" x2="3712" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(3584,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">cntrlsigmux</text>
   </g>
   <polyline points="3616,30304 3616,30368 3680,30336 3616,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcwriteenable
Mode : output
Type : std_logic
Net  : hazardunit_pcwrite_to_pc</title></polyline>
   <line x1="3680" y1="30336" x2="3712" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(3584,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcwriteenable</text>
   </g>
   <polyline points="3616,30432 3616,30496 3680,30464 3616,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : ifidflush
Mode    : output
Type    : std_logic
Comment : Changed from ifidwriteenable
Comment : Changed from ifidwriteenable</title></polyline>
   <line x1="3696" y1="30448" x2="3728" y2="30480" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="3696" y1="30480" x2="3728" y2="30448" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="3680" y1="30464" x2="3712" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(3584,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifidflush</text>
   </g>
   <polyline points="3616,30560 3616,30624 3680,30592 3616,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ctrl_disable
Mode : output
Type : std_logic
Net  : hazardunit_controldisable_to_controlunit</title></polyline>
   <line x1="3680" y1="30592" x2="3712" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(3584,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ctrl_disable</text>
   </g>
   <a href="design_idex_Behavioral_7o7e21er.htm" target="_top">

   <rect x="10112" y="28544" width="2560" height="2304"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : IDEX_INST
Entity      : idex
Bound arch. : Behavioral(V)
External    : No
Comment     : TO IDEX</title></rect>
    </a>

   <g transform="translate(10112,28486)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">IDEX_INST:idex:Behavioral(V)</text>
   </g>
   <polyline points="10080,28640 10080,28704 10144,28672 10080,28640"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : clock</title></polyline>
   <line x1="10080" y1="28672" x2="10048" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="10048,28704 9968,28704 9920,28672 9968,28640 10048,28640 10048,28704"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(9856,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="10080,28768 10080,28832 10144,28800 10080,28768"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rstbar
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="10080" y1="28800" x2="10048" y2="28800" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rstbar</text>
   </g>
   <polyline points="10048,28832 9968,28832 9920,28800 9968,28768 10048,28768 10048,28832"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(9856,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="10080,28896 10080,28960 10144,28928 10080,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pcin
Mode          : input
Type          : STD_LOGIC_VECTOR(15 downto 0)
On sens. list : no
Net           : ifid_pcout_to_pcimmadder</title></polyline>
   <line x1="10080" y1="28928" x2="10048" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pcin(15:0)</text>
   </g>
   <polyline points="10080,29024 10080,29088 10144,29056 10080,29024"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instructionin
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : ifid_instruction_to_OUT</title></polyline>
   <line x1="10080" y1="29056" x2="10048" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29056)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instructionin(31:0)</text>
   </g>
   <polyline points="10048,29088 9968,29088 9920,29056 9968,29024 10048,29024 10048,29088"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : ifid_instruction_to_OUT
Net        : ifid_instruction_to_OUT
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; ifid_instruction_to_OUT
Driver     : ifid_instance.ifidinstructionout
Receiver   : CONTROLUNIT_INST.instruction
Receiver   : HAZARD_UNIT_INST.instruction
Receiver   : IDEX_INST.instructionin
Receiver   : concurrent0.ifid_instruction_to_OUT</title></polyline>
   <g transform="translate(9856,29056)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifid_instruction_to_OUT</text>
   </g>
   <polyline points="12640,28640 12640,28704 12704,28672 12640,28640"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : instructionout
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : idex_instruction_to_alucontrol</title></polyline>
   <line x1="12704" y1="28672" x2="12736" y2="28672" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">instructionout(31:0)</text>
   </g>
   <polyline points="10080,29152 10080,29216 10144,29184 10080,29152"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readdata1in
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : registers_reg1out_to_idex</title></polyline>
   <line x1="10080" y1="29184" x2="10048" y2="29184" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29184)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readdata1in(31:0)</text>
   </g>
   <polyline points="10080,29280 10080,29344 10144,29312 10080,29280"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readdata2in
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : registers_reg2out_to_idex</title></polyline>
   <line x1="10080" y1="29312" x2="10048" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readdata2in(31:0)</text>
   </g>
   <polyline points="10080,29408 10080,29472 10144,29440 10080,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : immediatein
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : immediategen_immediate_to_idex</title></polyline>
   <line x1="10080" y1="29440" x2="10048" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">immediatein(31:0)</text>
   </g>
   <polyline points="12640,28768 12640,28832 12704,28800 12640,28768"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : immediateout
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : idex_immediate_to_alusrcmuxb</title></polyline>
   <line x1="12704" y1="28800" x2="12736" y2="28800" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">immediateout(31:0)</text>
   </g>
   <polyline points="12640,28896 12640,28960 12704,28928 12640,28896"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pcout
Mode : output
Type : STD_LOGIC_VECTOR(15 downto 0)
Net  : idex_pcout_to_alu</title></polyline>
   <line x1="12704" y1="28928" x2="12736" y2="28928" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">pcout(15:0)</text>
   </g>
   <polyline points="12640,29024 12640,29088 12704,29056 12640,29024"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata1out
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : idex_rs1_to_forwardingmuxa</title></polyline>
   <line x1="12704" y1="29056" x2="12736" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29056)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata1out(31:0)</text>
   </g>
   <polyline points="12640,29152 12640,29216 12704,29184 12640,29152"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata2out
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : idex_rs2_to_forwardingmuxb</title></polyline>
   <line x1="12704" y1="29184" x2="12736" y2="29184" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29184)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata2out(31:0)</text>
   </g>
   <polyline points="10080,29536 10080,29600 10144,29568 10080,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemtoRegin
Mode          : input
Type          : std_logic
Comment       : WB
On sens. list : no
Comment       : WB
Net           : controlunit_memtoreg_to_idex</title></polyline>
   <line x1="10080" y1="29568" x2="10048" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemtoRegin</text>
   </g>
   <polyline points="10080,29664 10080,29728 10144,29696 10080,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : RegWritein
Mode          : input
Type          : std_logic
On sens. list : no
Net           : controlunit_regwrite_to_idex</title></polyline>
   <line x1="10080" y1="29696" x2="10048" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">RegWritein</text>
   </g>
   <polyline points="10080,29792 10080,29856 10144,29824 10080,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemReadin
Mode          : input
Type          : std_logic
Comment       : M
On sens. list : no
Comment       : M
Net           : controlunit_memread_to_idex</title></polyline>
   <line x1="10080" y1="29824" x2="10048" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemReadin</text>
   </g>
   <polyline points="10080,29920 10080,29984 10144,29952 10080,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemWritein
Mode          : input
Type          : std_logic
On sens. list : no
Net           : controlunit_memwrite_to_idex</title></polyline>
   <line x1="10080" y1="29952" x2="10048" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemWritein</text>
   </g>
   <polyline points="10080,30048 10080,30112 10144,30080 10080,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : Branchin
Mode          : input
Type          : std_logic
On sens. list : no
Net           : controlunit_branch_to_idex</title></polyline>
   <line x1="10080" y1="30080" x2="10048" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">Branchin</text>
   </g>
   <polyline points="10080,30176 10080,30240 10144,30208 10080,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ALUSrcin
Mode          : input
Type          : std_logic
Comment       : EX
On sens. list : no
Comment       : EX
Net           : controlunit_alusource_to_idex</title></polyline>
   <line x1="10080" y1="30208" x2="10048" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ALUSrcin</text>
   </g>
   <polyline points="10080,30304 10080,30368 10144,30336 10080,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ALUOpin
Mode          : input
Type          : std_logic_vector(1 downto 0)
On sens. list : no
Net           : contolunit_aluop_to_idex</title></polyline>
   <line x1="10080" y1="30336" x2="10048" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ALUOpin(1:0)</text>
   </g>
   <polyline points="12640,29280 12640,29344 12704,29312 12640,29280"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemtoRegout
Mode    : output
Type    : std_logic
Comment : WB
Comment : WB
Net     : idex_memtoreg_to_exmem</title></polyline>
   <line x1="12704" y1="29312" x2="12736" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemtoRegout</text>
   </g>
   <polyline points="12640,29408 12640,29472 12704,29440 12640,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : RegWriteout
Mode : output
Type : std_logic
Net  : idex_regwrite_to_exmem</title></polyline>
   <line x1="12704" y1="29440" x2="12736" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">RegWriteout</text>
   </g>
   <polyline points="12640,29536 12640,29600 12704,29568 12640,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemReadout
Mode    : output
Type    : std_logic
Comment : M
Comment : M
Net     : idex_memread_to_exmem</title></polyline>
   <line x1="12704" y1="29568" x2="12736" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemReadout</text>
   </g>
   <polyline points="12640,29664 12640,29728 12704,29696 12640,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MemWriteout
Mode : output
Type : std_logic
Net  : idex_memwrite_to_exmem</title></polyline>
   <line x1="12704" y1="29696" x2="12736" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemWriteout</text>
   </g>
   <polyline points="12640,29792 12640,29856 12704,29824 12640,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : Branchout
Mode : output
Type : std_logic
Net  : idex_branch_to_exmem</title></polyline>
   <line x1="12704" y1="29824" x2="12736" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">Branchout</text>
   </g>
   <polyline points="12640,29920 12640,29984 12704,29952 12640,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : ALUSrc
Mode    : output
Type    : std_logic
Comment : EX
Comment : EX
Net     : idex_alusrcb_to_alusrcmuxb</title></polyline>
   <line x1="12704" y1="29952" x2="12736" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ALUSrc</text>
   </g>
   <polyline points="12640,30048 12640,30112 12704,30080 12640,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ALUOp
Mode : output
Type : std_logic_vector(1 downto 0)
Net  : idex_aluop_to_alucontrol</title></polyline>
   <line x1="12704" y1="30080" x2="12736" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ALUOp(1:0)</text>
   </g>
   <polyline points="10080,30432 10080,30496 10144,30464 10080,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs1in
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : ifid_rs1_to_register</title></polyline>
   <line x1="10080" y1="30464" x2="10048" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs1in(4:0)</text>
   </g>
   <polyline points="10080,30560 10080,30624 10144,30592 10080,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs2in
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : ifid_rs2_to_register</title></polyline>
   <line x1="10080" y1="30592" x2="10048" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs2in(4:0)</text>
   </g>
   <polyline points="10080,30688 10080,30752 10144,30720 10080,30688"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rdin
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : ifid_rd_to_idex</title></polyline>
   <line x1="10080" y1="30720" x2="10048" y2="30720" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(10176,30720)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rdin(4:0)</text>
   </g>
   <polyline points="12640,30176 12640,30240 12704,30208 12640,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rs1out
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : idex_rs1_to_forwardingunit</title></polyline>
   <line x1="12704" y1="30208" x2="12736" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rs1out(4:0)</text>
   </g>
   <polyline points="12640,30304 12640,30368 12704,30336 12640,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rs2out
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : idex_rs2_to_forwardingunit</title></polyline>
   <line x1="12704" y1="30336" x2="12736" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rs2out(4:0)</text>
   </g>
   <polyline points="12640,30432 12640,30496 12704,30464 12640,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rdout
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : idex_rd_to_exmem</title></polyline>
   <line x1="12704" y1="30464" x2="12736" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(12608,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rdout(4:0)</text>
   </g>
   <a href="design_alucontrol_Behavioral_2sa73gvu.htm" target="_top">

   <rect x="14656" y="29824" width="2176" height="384"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : ALU_CONTROL_INST
Entity      : alucontrol
Bound arch. : Behavioral(V)
External    : No
Comment     : --------------------------------------------------------------------------END</title></rect>
    </a>

   <g transform="translate(14656,29766)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">ALU_CONTROL_INST:alucontrol:Behavioral(V)</text>
   </g>
   <polyline points="14624,29920 14624,29984 14688,29952 14624,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : instruction
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : idex_instruction_to_alucontrol</title></polyline>
   <line x1="14624" y1="29952" x2="14592" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(14720,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">instruction(31:0)</text>
   </g>
   <polyline points="14624,30048 14624,30112 14688,30080 14624,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : aluop
Mode          : input
Type          : STD_LOGIC_VECTOR(1 downto 0)
On sens. list : no
Net           : idex_aluop_to_alucontrol</title></polyline>
   <line x1="14624" y1="30080" x2="14592" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(14720,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">aluop(1:0)</text>
   </g>
   <polyline points="16800,29920 16800,29984 16864,29952 16800,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : aluoperation
Mode    : output
Type    : STD_LOGIC_VECTOR(4 downto 0)
Comment : Increased to 5 bits
Comment : Increased to 5 bits
Net     : alucontrol_aluop_to_alu</title></polyline>
   <line x1="16864" y1="29952" x2="16896" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(16768,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">aluoperation(4:0)</text>
   </g>
   <a href="design_ALU_Behavioral_vcc8qu3b.htm" target="_top">

   <rect x="17984" y="29440" width="2048" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : ALU_INST
Entity      : ALU
Bound arch. : Behavioral(V)
External    : No
Comment     : TO ALU</title></rect>
    </a>

   <g transform="translate(17984,29382)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">ALU_INST:ALU:Behavioral(V)</text>
   </g>
   <polyline points="17952,29536 17952,29600 18016,29568 17952,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : input_0
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : forwardingmuxA_rs1_to_ALU</title></polyline>
   <line x1="17952" y1="29568" x2="17920" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(18048,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">input_0(31:0)</text>
   </g>
   <polyline points="17952,29664 17952,29728 18016,29696 17952,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : input_1
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : alusrcmuxB_rs2_to_alu</title></polyline>
   <line x1="17952" y1="29696" x2="17920" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(18048,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">input_1(31:0)</text>
   </g>
   <polyline points="17952,29792 17952,29856 18016,29824 17952,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : pc
Mode          : input
Type          : std_logic_vector(15 downto 0)
Comment       : Added PC input
On sens. list : no
Comment       : Added PC input
Net           : idex_pcout_to_alu</title></polyline>
   <line x1="17952" y1="29824" x2="17920" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(18048,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">pc(15:0)</text>
   </g>
   <polyline points="17952,29920 17952,29984 18016,29952 17952,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : operation
Mode          : input
Type          : std_logic_vector(4 downto 0)
Comment       : Increased to 5 bits
On sens. list : no
Comment       : Increased to 5 bits
Net           : alucontrol_aluop_to_alu</title></polyline>
   <line x1="17952" y1="29952" x2="17920" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(18048,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">operation(4:0)</text>
   </g>
   <polyline points="20000,29536 20000,29600 20064,29568 20000,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ALU_output
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : alu_result_to_exmem</title></polyline>
   <line x1="20064" y1="29568" x2="20096" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(19968,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ALU_output(31:0)</text>
   </g>
   <polyline points="20000,29664 20000,29728 20064,29696 20000,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : zero_flag
Mode : output
Type : std_logic
Net  : alu_zeroresult_to_exmem</title></polyline>
   <line x1="20064" y1="29696" x2="20096" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(19968,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">zero_flag</text>
   </g>
   <polyline points="20000,29792 20000,29856 20064,29824 20000,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : JALorBRANCH
Mode : output
Type : std_logic
Net  : alu_JALorBRANCH_to_exmem</title></polyline>
   <line x1="20064" y1="29824" x2="20096" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(19968,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">JALorBRANCH</text>
   </g>
   <a href="design_forwardingMuxA_Behavioral_i5lvcq2l.htm" target="_top">

   <rect x="26112" y="26112" width="2944" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : FORWARDING_MUX_A_INST
Entity      : forwardingMuxA
Bound arch. : Behavioral(V)
External    : No
Comment     : TO FORWARDINGMUXA</title></rect>
    </a>

   <g transform="translate(26112,26054)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">FORWARDING_MUX_A_INST:forwardingMuxA:Behavioral(V)</text>
   </g>
   <polyline points="26080,26208 26080,26272 26144,26240 26080,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs1
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : idex_rs1_to_forwardingmuxa</title></polyline>
   <line x1="26080" y1="26240" x2="26048" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs1(31:0)</text>
   </g>
   <polyline points="26080,26336 26080,26400 26144,26368 26080,26336"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardedrs1exmem
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : exmem_result_to_datamem</title></polyline>
   <line x1="26080" y1="26368" x2="26048" y2="26368" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardedrs1exmem(31:0)</text>
   </g>
   <polyline points="26048,26400 25968,26400 25920,26368 25968,26336 26048,26336 26048,26400"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(25856,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="26080,26464 26080,26528 26144,26496 26080,26464"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardedrs1memwb
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : writebackmux_writedata_to_registers</title></polyline>
   <line x1="26080" y1="26496" x2="26048" y2="26496" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,26496)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardedrs1memwb(31:0)</text>
   </g>
   <polyline points="26048,26528 25968,26528 25920,26496 25968,26464 26048,26464 26048,26528"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : writebackmux_writedata_to_registers
Net        : writebackmux_writedata_to_registers
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; writebackmux_writedata_to_registers
Driver     : WRITEBACK_MUX_INST.writebackdata
Receiver   : REGFILE_INST.writedata
Receiver   : CONTROLUNIT_INST.memwb_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1memwb
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2memwb</title></polyline>
   <g transform="translate(25856,26496)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">writebackmux_writedata_to_registers</text>
   </g>
   <polyline points="26080,26592 26080,26656 26144,26624 26080,26592"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardAmuxcntrl
Mode          : input
Type          : STD_LOGIC_VECTOR(1 downto 0)
On sens. list : no
Net           : forwardingunit_Amuxcntrl_to_forrwardingmuxA</title></polyline>
   <line x1="26080" y1="26624" x2="26048" y2="26624" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,26624)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardAmuxcntrl(1:0)</text>
   </g>
   <polyline points="29024,26208 29024,26272 29088,26240 29024,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MuxOutput
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : forwardingmuxA_rs1_to_ALU</title></polyline>
   <line x1="29088" y1="26240" x2="29120" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(28992,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MuxOutput(31:0)</text>
   </g>
   <a href="design_forwardingMuxB_Behavioral_brhjea00.htm" target="_top">

   <rect x="38784" y="29568" width="2944" height="640"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : FORWARDING_MUX_B_INST
Entity      : forwardingMuxB
Bound arch. : Behavioral(V)
External    : No
Comment     : TO FORWARDINGMUXB</title></rect>
    </a>

   <g transform="translate(38784,29510)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">FORWARDING_MUX_B_INST:forwardingMuxB:Behavioral(V)</text>
   </g>
   <polyline points="38752,29664 38752,29728 38816,29696 38752,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rs2
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : idex_rs2_to_forwardingmuxb</title></polyline>
   <line x1="38752" y1="29696" x2="38720" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(38848,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rs2(31:0)</text>
   </g>
   <polyline points="38752,29792 38752,29856 38816,29824 38752,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardedrs2exmem
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : exmem_result_to_datamem</title></polyline>
   <line x1="38752" y1="29824" x2="38720" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(38848,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardedrs2exmem(31:0)</text>
   </g>
   <polyline points="38720,29856 38640,29856 38592,29824 38640,29792 38720,29792 38720,29856"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(38528,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="38752,29920 38752,29984 38816,29952 38752,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardedrs2memwb
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : writebackmux_writedata_to_registers</title></polyline>
   <line x1="38752" y1="29952" x2="38720" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(38848,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardedrs2memwb(31:0)</text>
   </g>
   <polyline points="38720,29984 38640,29984 38592,29952 38640,29920 38720,29920 38720,29984"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : writebackmux_writedata_to_registers
Net        : writebackmux_writedata_to_registers
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; writebackmux_writedata_to_registers
Driver     : WRITEBACK_MUX_INST.writebackdata
Receiver   : REGFILE_INST.writedata
Receiver   : CONTROLUNIT_INST.memwb_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1memwb
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2memwb</title></polyline>
   <g transform="translate(38528,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">writebackmux_writedata_to_registers</text>
   </g>
   <polyline points="38752,30048 38752,30112 38816,30080 38752,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : forwardBmuxcntrl
Mode          : input
Type          : STD_LOGIC_VECTOR(1 downto 0)
On sens. list : no
Net           : forwardingunit_Bmuxcntrl_to_forrwardingmuxB</title></polyline>
   <line x1="38752" y1="30080" x2="38720" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(38848,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">forwardBmuxcntrl(1:0)</text>
   </g>
   <polyline points="41696,29664 41696,29728 41760,29696 41696,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MuxOutput
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : forwardingmuxb_rs2_to_alusrcmuxb</title></polyline>
   <line x1="41760" y1="29696" x2="41792" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(41664,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MuxOutput(31:0)</text>
   </g>
   <a href="design_ALUSrcMuxB_Behavioral_k70jmdkt.htm" target="_top">

   <rect x="42880" y="29568" width="2432" height="512"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : ALU_SRC_MUX_B_INST
Entity      : ALUSrcMuxB
Bound arch. : Behavioral(V)
External    : No
Comment     : TO ALUSRCMUXB</title></rect>
    </a>

   <g transform="translate(42880,29510)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">ALU_SRC_MUX_B_INST:ALUSrcMuxB:Behavioral(V)</text>
   </g>
   <polyline points="42848,29664 42848,29728 42912,29696 42848,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ReadRegister2
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : forwardingmuxb_rs2_to_alusrcmuxb</title></polyline>
   <line x1="42848" y1="29696" x2="42816" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(42944,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ReadRegister2(31:0)</text>
   </g>
   <polyline points="42848,29792 42848,29856 42912,29824 42848,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ReadImmediate
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : idex_immediate_to_alusrcmuxb</title></polyline>
   <line x1="42848" y1="29824" x2="42816" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(42944,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ReadImmediate(31:0)</text>
   </g>
   <polyline points="42848,29920 42848,29984 42912,29952 42848,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ALUSrcBControl
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : idex_alusrcb_to_alusrcmuxb</title></polyline>
   <line x1="42848" y1="29952" x2="42816" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(42944,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ALUSrcBControl</text>
   </g>
   <polyline points="45280,29664 45280,29728 45344,29696 45280,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MuxOutput
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : alusrcmuxB_rs2_to_alu</title></polyline>
   <line x1="45344" y1="29696" x2="45376" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(45248,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MuxOutput(31:0)</text>
   </g>
   <a href="design_exmem_Behavioral_5dl6ten3.htm" target="_top">

   <rect x="21824" y="29312" width="2304" height="1664"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : EXMEM_INST
Entity      : exmem
Bound arch. : Behavioral(V)
External    : No
Comment     : TO EXMEM</title></rect>
    </a>

   <g transform="translate(21824,29254)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">EXMEM_INST:exmem:Behavioral(V)</text>
   </g>
   <polyline points="21792,29408 21792,29472 21856,29440 21792,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : clock</title></polyline>
   <line x1="21792" y1="29440" x2="21760" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="21760,29472 21680,29472 21632,29440 21680,29408 21760,29408 21760,29472"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(21568,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="21792,29536 21792,29600 21856,29568 21792,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : resetbar
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="21792" y1="29568" x2="21760" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="21760,29600 21680,29600 21632,29568 21680,29536 21760,29536 21760,29600"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <polyline points="21792,29664 21792,29728 21856,29696 21792,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : aluzeroin
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : alu_zeroresult_to_exmem</title></polyline>
   <line x1="21792" y1="29696" x2="21760" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">aluzeroin</text>
   </g>
   <polyline points="21792,29792 21792,29856 21856,29824 21792,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : aluresultin
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : alu_result_to_exmem</title></polyline>
   <line x1="21792" y1="29824" x2="21760" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">aluresultin(31:0)</text>
   </g>
   <polyline points="21792,29920 21792,29984 21856,29952 21792,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readdata2in
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : forwardingmuxb_rs2_to_alusrcmuxb</title></polyline>
   <line x1="21792" y1="29952" x2="21760" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readdata2in(31:0)</text>
   </g>
   <polyline points="24096,29408 24096,29472 24160,29440 24096,29408"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : aluzeroout
Mode : output
Type : STD_LOGIC
Net  : exmem_zero_to_branchand</title></polyline>
   <line x1="24160" y1="29440" x2="24192" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">aluzeroout</text>
   </g>
   <polyline points="24096,29536 24096,29600 24160,29568 24096,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : aluresultout
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : exmem_result_to_datamem</title></polyline>
   <line x1="24160" y1="29568" x2="24192" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">aluresultout(31:0)</text>
   </g>
   <polyline points="24192,29536 24272,29536 24320,29568 24272,29600 24192,29600 24192,29536"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(24384,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="24096,29664 24096,29728 24160,29696 24096,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata2out
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : exmem_src2_to_datamem</title></polyline>
   <line x1="24160" y1="29696" x2="24192" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata2out(31:0)</text>
   </g>
   <polyline points="21792,30048 21792,30112 21856,30080 21792,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemtoRegin
Mode          : input
Type          : std_logic
Comment       : WB
On sens. list : no
Comment       : WB
Net           : idex_memtoreg_to_exmem</title></polyline>
   <line x1="21792" y1="30080" x2="21760" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemtoRegin</text>
   </g>
   <polyline points="21792,30176 21792,30240 21856,30208 21792,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : RegWritein
Mode          : input
Type          : std_logic
On sens. list : no
Net           : idex_regwrite_to_exmem</title></polyline>
   <line x1="21792" y1="30208" x2="21760" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">RegWritein</text>
   </g>
   <polyline points="21792,30304 21792,30368 21856,30336 21792,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemReadin
Mode          : input
Type          : std_logic
Comment       : M
On sens. list : no
Comment       : M
Net           : idex_memread_to_exmem</title></polyline>
   <line x1="21792" y1="30336" x2="21760" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemReadin</text>
   </g>
   <polyline points="21792,30432 21792,30496 21856,30464 21792,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemWritein
Mode          : input
Type          : std_logic
On sens. list : no
Net           : idex_memwrite_to_exmem</title></polyline>
   <line x1="21792" y1="30464" x2="21760" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemWritein</text>
   </g>
   <polyline points="21792,30560 21792,30624 21856,30592 21792,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : Branchin
Mode          : input
Type          : std_logic
On sens. list : no
Net           : idex_branch_to_exmem</title></polyline>
   <line x1="21792" y1="30592" x2="21760" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">Branchin</text>
   </g>
   <polyline points="21792,30688 21792,30752 21856,30720 21792,30688"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : JALorBRANCH
Mode          : input
Type          : std_logic
Comment       : New input for JAL or Branch condition
On sens. list : no
Comment       : New input for JAL or Branch condition
Net           : alu_JALorBRANCH_to_exmem</title></polyline>
   <line x1="21792" y1="30720" x2="21760" y2="30720" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30720)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">JALorBRANCH</text>
   </g>
   <polyline points="24096,29792 24096,29856 24160,29824 24096,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemtoRegout
Mode    : output
Type    : std_logic
Comment : WB
Comment : WB
Net     : exmem_memtoreg_to_memwb</title></polyline>
   <line x1="24160" y1="29824" x2="24192" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemtoRegout</text>
   </g>
   <polyline points="24096,29920 24096,29984 24160,29952 24096,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : RegWriteout
Mode : output
Type : std_logic
Net  : exmem_regwrite_to_memwb</title></polyline>
   <line x1="24160" y1="29952" x2="24192" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">RegWriteout</text>
   </g>
   <polyline points="24096,30048 24096,30112 24160,30080 24096,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemRead
Mode    : output
Type    : std_logic
Comment : M
Comment : M
Net     : exmem_memread_to_datamem</title></polyline>
   <line x1="24160" y1="30080" x2="24192" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemRead</text>
   </g>
   <polyline points="24096,30176 24096,30240 24160,30208 24096,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : MemWrite
Mode : output
Type : std_logic
Net  : exmem_memwrite_to_datamem</title></polyline>
   <line x1="24160" y1="30208" x2="24192" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemWrite</text>
   </g>
   <polyline points="24096,30304 24096,30368 24160,30336 24096,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : Branch
Mode : output
Type : std_logic
Net  : exmem_branch_to_branchand</title></polyline>
   <line x1="24160" y1="30336" x2="24192" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">Branch</text>
   </g>
   <polyline points="21792,30816 21792,30880 21856,30848 21792,30816"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rdin
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : idex_rd_to_exmem</title></polyline>
   <line x1="21792" y1="30848" x2="21760" y2="30848" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(21888,30848)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rdin(4:0)</text>
   </g>
   <polyline points="24096,30432 24096,30496 24160,30464 24096,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rdout
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : exmem_rd_to_memwb</title></polyline>
   <line x1="24160" y1="30464" x2="24192" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(24064,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rdout(4:0)</text>
   </g>
   <a href="design_ForwardingUnit_Behavioral_09jds547.htm" target="_top">

   <rect x="35072" y="29824" width="2688" height="896"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : FORWARDING_UNIT_INST
Entity      : ForwardingUnit
Bound arch. : Behavioral(V)
External    : No
Comment     : TO FORWARDING UNIT</title></rect>
    </a>

   <g transform="translate(35072,29766)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">FORWARDING_UNIT_INST:ForwardingUnit:Behavioral(V)</text>
   </g>
   <polyline points="35040,29920 35040,29984 35104,29952 35040,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : exmemregwritecntrl
Mode          : input
Type          : STD_LOGIC
Comment       : Control signals
On sens. list : no
Comment       : Control signals
Net           : exmem_regwrite_to_memwb</title></polyline>
   <line x1="35040" y1="29952" x2="35008" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">exmemregwritecntrl</text>
   </g>
   <polyline points="35040,30048 35040,30112 35104,30080 35040,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memwbregwritecntrl
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : memwb_regwrite_to_registers</title></polyline>
   <line x1="35040" y1="30080" x2="35008" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memwbregwritecntrl</text>
   </g>
   <polyline points="35040,30176 35040,30240 35104,30208 35040,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : exmemrd
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
Comment       : Register addresses
On sens. list : no
Comment       : Register addresses
Net           : exmem_rd_to_memwb</title></polyline>
   <line x1="35040" y1="30208" x2="35008" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">exmemrd(4:0)</text>
   </g>
   <polyline points="35040,30304 35040,30368 35104,30336 35040,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memwbrd
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : memwb_rd_to_out</title></polyline>
   <line x1="35040" y1="30336" x2="35008" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memwbrd(4:0)</text>
   </g>
   <polyline points="35040,30432 35040,30496 35104,30464 35040,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : idexrs1
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : idex_rs1_to_forwardingunit</title></polyline>
   <line x1="35040" y1="30464" x2="35008" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">idexrs1(4:0)</text>
   </g>
   <polyline points="35040,30560 35040,30624 35104,30592 35040,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : idexrs2
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : idex_rs2_to_forwardingunit</title></polyline>
   <line x1="35040" y1="30592" x2="35008" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">idexrs2(4:0)</text>
   </g>
   <polyline points="37728,29920 37728,29984 37792,29952 37728,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : forwardAmuxcntrl
Mode    : output
Type    : STD_LOGIC_VECTOR(1 downto 0)
Comment : Forwarding control outputs
Comment : Forwarding control outputs
Net     : forwardingunit_Amuxcntrl_to_forrwardingmuxA</title></polyline>
   <line x1="37792" y1="29952" x2="37824" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(37696,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">forwardAmuxcntrl(1:0)</text>
   </g>
   <polyline points="37728,30048 37728,30112 37792,30080 37728,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : forwardBmuxcntrl
Mode : output
Type : STD_LOGIC_VECTOR(1 downto 0)
Net  : forwardingunit_Bmuxcntrl_to_forrwardingmuxB</title></polyline>
   <line x1="37792" y1="30080" x2="37824" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(37696,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">forwardBmuxcntrl(1:0)</text>
   </g>
   <a href="design_data_memory_Behavioral_kpuq6gba.htm" target="_top">

   <rect x="26112" y="29824" width="2304" height="1280"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : DATA_MEMORY_INST
Entity      : data_memory
Bound arch. : Behavioral(V)
External    : No
Comment     : --------------------------------------------------------------------------END   </title></rect>
    </a>

   <g transform="translate(26112,29766)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">DATA_MEMORY_INST:data_memory:Behavioral(V)</text>
   </g>
   <polyline points="26080,29920 26080,29984 26144,29952 26080,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : std_logic
Comment       : Original ports
On sens. list : no
Comment       : Original ports
Net           : clock</title></polyline>
   <line x1="26080" y1="29952" x2="26048" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="26048,29984 25968,29984 25920,29952 25968,29920 26048,29920 26048,29984"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(25856,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="26080,30048 26080,30112 26144,30080 26080,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : reset
Mode          : input
Type          : std_logic
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="26080" y1="30080" x2="26048" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">reset</text>
   </g>
   <polyline points="26048,30112 25968,30112 25920,30080 25968,30048 26048,30048 26048,30112"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(25856,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="26080,30176 26080,30240 26144,30208 26080,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memwrite
Mode          : input
Type          : std_logic
On sens. list : no
Net           : exmem_memwrite_to_datamem</title></polyline>
   <line x1="26080" y1="30208" x2="26048" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memwrite</text>
   </g>
   <polyline points="26080,30304 26080,30368 26144,30336 26080,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memread
Mode          : input
Type          : std_logic
On sens. list : no
Net           : exmem_memread_to_datamem</title></polyline>
   <line x1="26080" y1="30336" x2="26048" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memread</text>
   </g>
   <polyline points="26080,30432 26080,30496 26144,30464 26080,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : address
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : exmem_result_to_datamem</title></polyline>
   <line x1="26080" y1="30464" x2="26048" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">address(31:0)</text>
   </g>
   <polyline points="26048,30496 25968,30496 25920,30464 25968,30432 26048,30432 26048,30496"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(25856,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="26080,30560 26080,30624 26144,30592 26080,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : writedata
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : exmem_src2_to_datamem</title></polyline>
   <line x1="26080" y1="30592" x2="26048" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">writedata(31:0)</text>
   </g>
   <polyline points="28384,29920 28384,29984 28448,29952 28384,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : datamem_readdata_to_memwb</title></polyline>
   <line x1="28448" y1="29952" x2="28480" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(28352,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata(31:0)</text>
   </g>
   <polyline points="26080,30688 26080,30752 26144,30720 26080,30688"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_clk
Mode          : input
Type          : std_logic
Comment       : Debug ports
On sens. list : no
Comment       : Debug ports
Net           : debug_clk</title></polyline>
   <line x1="26080" y1="30720" x2="26048" y2="30720" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30720)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_clk</text>
   </g>
   <polyline points="26048,30752 25968,30752 25920,30720 25968,30688 26048,30688 26048,30752"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : debug_clk
Net        : debug_clk
Type       : std_logic
Comment    : Unified debug interface (48 bits total)
HDL object : input port -&gt; debug_clk
Driver     : debug_clk
Receiver   : instruction_memory_inst.debug_clk
Receiver   : REGFILE_INST.debug_clk
Receiver   : DATA_MEMORY_INST.debug_clk
Receiver   : Proc0.debug_clk</title></polyline>
   <polyline points="26080,30816 26080,30880 26144,30848 26080,30816"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_address
Mode          : input
Type          : std_logic_vector(6 downto 0)
On sens. list : no
Net           : debug_addr</title></polyline>
   <line x1="26080" y1="30848" x2="26048" y2="30848" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30848)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_address(6:0)</text>
   </g>
   <polyline points="26080,30944 26080,31008 26144,30976 26080,30944"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_read_enable
Mode          : input
Type          : std_logic
On sens. list : no
Net           : dm_enable</title></polyline>
   <line x1="26080" y1="30976" x2="26048" y2="30976" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(26176,30976)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">debug_read_enable</text>
   </g>
   <polyline points="28384,30080 28416,30112 28448,30080 28416,30048 28384,30080"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_data
Mode          : inout
Type          : std_logic_vector(31 downto 0)
Comment       : Changed to inout
On sens. list : no
Comment       : Changed to inout
Net           : dm_data_out</title></polyline>
   <line x1="28448" y1="30080" x2="28480" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(28352,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_data(31:0)</text>
   </g>
   <a href="design_BranchAND_Behavioral_2fru18n2.htm" target="_top">

   <rect x="42880" y="26112" width="1920" height="384"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : BRANCH_AND_INST
Entity      : BranchAND
Bound arch. : Behavioral(V)
External    : No
Comment     : TO BRANCH AND</title></rect>
    </a>

   <g transform="translate(42880,26054)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">BRANCH_AND_INST:BranchAND:Behavioral(V)</text>
   </g>
   <polyline points="42848,26208 42848,26272 42912,26240 42848,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ALUZero
Mode          : input
Type          : std_logic
Comment       : Inputs
On sens. list : no
Comment       : Inputs
Net           : exmem_zero_to_branchand</title></polyline>
   <line x1="42848" y1="26240" x2="42816" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(42944,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ALUZero</text>
   </g>
   <polyline points="42848,26336 42848,26400 42912,26368 42848,26336"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : ControlBranch
Mode          : input
Type          : std_logic
On sens. list : no
Net           : exmem_branch_to_branchand</title></polyline>
   <line x1="42848" y1="26368" x2="42816" y2="26368" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(42944,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">ControlBranch</text>
   </g>
   <polyline points="44768,26208 44768,26272 44832,26240 44768,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : BranchResponse
Mode    : output
Type    : std_logic
Comment : Output
Comment : Output
Net     : branchand_jumpbranchselect_to_pc_mux</title></polyline>
   <line x1="44832" y1="26240" x2="44864" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(44736,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">BranchResponse</text>
   </g>
   <a href="design_memwb_Behavioral_rtq40c9k.htm" target="_top">

   <rect x="30464" y="29568" width="2560" height="1152"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : MEMWB_INST
Entity      : memwb
Bound arch. : Behavioral(V)
External    : No
Comment     : --------------------------------------------------------------------------END      </title></rect>
    </a>

   <g transform="translate(30464,29510)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">MEMWB_INST:memwb:Behavioral(V)</text>
   </g>
   <polyline points="30432,29664 30432,29728 30496,29696 30432,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : clk
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : clock</title></polyline>
   <line x1="30432" y1="29696" x2="30400" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">clk</text>
   </g>
   <polyline points="30400,29728 30320,29728 30272,29696 30320,29664 30400,29664 30400,29728"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : clock
Net        : clock
Type       : std_logic
Comment    : Core signals (2 bits)
HDL object : input port -&gt; clock
Driver     : clock
Receiver   : pc_instance.clk
Receiver   : ifid_instance.clk
Receiver   : IDEX_INST.clk
Receiver   : EXMEM_INST.clk
Receiver   : DATA_MEMORY_INST.clk
Receiver   : MEMWB_INST.clk</title></polyline>
   <g transform="translate(30208,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">clock</text>
   </g>
   <polyline points="30432,29792 30432,29856 30496,29824 30432,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : resetbar
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : resetbar</title></polyline>
   <line x1="30432" y1="29824" x2="30400" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="30400,29856 30320,29856 30272,29824 30320,29792 30400,29792 30400,29856"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <polyline points="30432,29920 30432,29984 30496,29952 30432,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : readdata2in
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : datamem_readdata_to_memwb</title></polyline>
   <line x1="30432" y1="29952" x2="30400" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">readdata2in(31:0)</text>
   </g>
   <polyline points="30432,30048 30432,30112 30496,30080 30432,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : aluresultin
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : exmem_result_to_datamem</title></polyline>
   <line x1="30432" y1="30080" x2="30400" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">aluresultin(31:0)</text>
   </g>
   <polyline points="30400,30112 30320,30112 30272,30080 30320,30048 30400,30048 30400,30112"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : exmem_result_to_datamem
Net        : exmem_result_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_result_to_datamem
Driver     : EXMEM_INST.aluresultout
Receiver   : CONTROLUNIT_INST.exmem_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1exmem
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2exmem
Receiver   : DATA_MEMORY_INST.address
Receiver   : MEMWB_INST.aluresultin</title></polyline>
   <g transform="translate(30208,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">exmem_result_to_datamem</text>
   </g>
   <polyline points="32992,29664 32992,29728 33056,29696 32992,29664"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : readdata2out
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : memwb_readdata_to_writebackmux</title></polyline>
   <line x1="33056" y1="29696" x2="33088" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(32960,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">readdata2out(31:0)</text>
   </g>
   <polyline points="32992,29792 32992,29856 33056,29824 32992,29792"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : aluresultout
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : memwb_aluresult_to_writebackmux</title></polyline>
   <line x1="33056" y1="29824" x2="33088" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(32960,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">aluresultout(31:0)</text>
   </g>
   <polyline points="30432,30176 30432,30240 30496,30208 30432,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : MemtoRegin
Mode          : input
Type          : std_logic
Comment       : WB
On sens. list : no
Comment       : WB
Net           : exmem_memtoreg_to_memwb</title></polyline>
   <line x1="30432" y1="30208" x2="30400" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">MemtoRegin</text>
   </g>
   <polyline points="30432,30304 30432,30368 30496,30336 30432,30304"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : RegWritein
Mode          : input
Type          : std_logic
On sens. list : no
Net           : exmem_regwrite_to_memwb</title></polyline>
   <line x1="30432" y1="30336" x2="30400" y2="30336" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">RegWritein</text>
   </g>
   <polyline points="32992,29920 32992,29984 33056,29952 32992,29920"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port    : MemtoReg
Mode    : output
Type    : std_logic
Comment : WB
Comment : WB
Net     : memwb_memtoreg_to_wbmux</title></polyline>
   <line x1="33056" y1="29952" x2="33088" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(32960,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">MemtoReg</text>
   </g>
   <polyline points="32992,30048 32992,30112 33056,30080 32992,30048"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : RegWrite
Mode : output
Type : std_logic
Net  : memwb_regwrite_to_registers</title></polyline>
   <line x1="33056" y1="30080" x2="33088" y2="30080" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(32960,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">RegWrite</text>
   </g>
   <polyline points="30432,30432 30432,30496 30496,30464 30432,30432"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rdin
Mode          : input
Type          : STD_LOGIC_VECTOR(4 downto 0)
On sens. list : no
Net           : exmem_rd_to_memwb</title></polyline>
   <line x1="30432" y1="30464" x2="30400" y2="30464" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">rdin(4:0)</text>
   </g>
   <polyline points="32992,30176 32992,30240 33056,30208 32992,30176"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : rdout
Mode : output
Type : STD_LOGIC_VECTOR(4 downto 0)
Net  : memwb_rd_to_out</title></polyline>
   <line x1="33056" y1="30208" x2="33088" y2="30208" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(32960,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">rdout(4:0)</text>
   </g>
   <polyline points="30432,30560 30432,30624 30496,30592 30432,30560"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : branchregwritecancel
Mode          : input
Type          : std_logic
On sens. list : no
Net           : branchand_regwritecancel_to_exmem</title></polyline>
   <line x1="30432" y1="30592" x2="30400" y2="30592" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(30528,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">branchregwritecancel</text>
   </g>
   <a href="design_writebackmux_Behavioral_g7t960q5.htm" target="_top">

   <rect x="35072" y="26112" width="2432" height="512"
 fill="rgb(240,240,240)" stroke="rgb(165,42,42)" stroke-width="3">
<title>Instance    : WRITEBACK_MUX_INST
Entity      : writebackmux
Bound arch. : Behavioral(V)
External    : No
Comment     : TO WRITE BACK MUX</title></rect>
    </a>

   <g transform="translate(35072,26054)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start">WRITEBACK_MUX_INST:writebackmux:Behavioral(V)</text>
   </g>
   <polyline points="35040,26208 35040,26272 35104,26240 35040,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : memtoregcontrol
Mode          : input
Type          : STD_LOGIC
On sens. list : no
Net           : memwb_memtoreg_to_wbmux</title></polyline>
   <line x1="35040" y1="26240" x2="35008" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">memtoregcontrol</text>
   </g>
   <polyline points="35040,26336 35040,26400 35104,26368 35040,26336"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : read_data
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : memwb_readdata_to_writebackmux</title></polyline>
   <line x1="35040" y1="26368" x2="35008" y2="26368" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">read_data(31:0)</text>
   </g>
   <polyline points="35040,26464 35040,26528 35104,26496 35040,26464"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : aluresult
Mode          : input
Type          : STD_LOGIC_VECTOR(31 downto 0)
On sens. list : no
Net           : memwb_aluresult_to_writebackmux</title></polyline>
   <line x1="35040" y1="26496" x2="35008" y2="26496" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(35136,26496)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">aluresult(31:0)</text>
   </g>
   <polyline points="37472,26208 37472,26272 37536,26240 37472,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : writebackdata
Mode : output
Type : STD_LOGIC_VECTOR(31 downto 0)
Net  : writebackmux_writedata_to_registers</title></polyline>
   <line x1="37536" y1="26240" x2="37568" y2="26240" stroke="rgb(255,0,255)" stroke-width="3"/>
   <g transform="translate(37440,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">writebackdata(31:0)</text>
   </g>
   <polyline points="37568,26208 37648,26208 37696,26240 37648,26272 37568,26272 37568,26208"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : writebackmux_writedata_to_registers
Net        : writebackmux_writedata_to_registers
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; writebackmux_writedata_to_registers
Driver     : WRITEBACK_MUX_INST.writebackdata
Receiver   : REGFILE_INST.writedata
Receiver   : CONTROLUNIT_INST.memwb_regdata
Receiver   : FORWARDING_MUX_A_INST.forwardedrs1memwb
Receiver   : FORWARDING_MUX_B_INST.forwardedrs2memwb</title></polyline>
   <g transform="translate(37760,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="central">writebackmux_writedata_to_registers</text>
   </g>
   <a href="design_internal_connections_behavioral_Proc0_k977dsjc.htm" target="_top">

   <rect x="75520" y="27520" width="320" height="896" rx="96"
 fill="rgb(173,216,230)" stroke="rgb(165,42,42)" stroke-width="3" stroke-dasharray="10,3"/>
    </a>

   <g transform="translate(75520,27520)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="ideographic">Proc0(V)</text>
   </g>
   <polyline points="75488,27616 75488,27680 75552,27648 75488,27616"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rf_enable
Mode          : input
Type          : std_logic
On sens. list : yes
Net           : rf_enable</title></polyline>
   <circle cx="75512" cy="27648" r="6"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="75488" y1="27648" x2="75456" y2="27648" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75488,27744 75488,27808 75552,27776 75488,27744"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : resetbar
Mode          : input
Type          : std_logic
On sens. list : yes
Net           : resetbar</title></polyline>
   <circle cx="75512" cy="27776" r="6"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="75488" y1="27776" x2="75456" y2="27776" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75456,27808 75376,27808 75328,27776 75376,27744 75456,27744 75456,27808"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : resetbar
Net        : resetbar
Type       : std_logic
HDL object : input port -&gt; resetbar
Driver     : resetbar
Receiver   : pc_instance.reset
Receiver   : instruction_memory_inst.reset
Receiver   : ifid_instance.rstbar
Receiver   : REGFILE_INST.resetbar
Receiver   : IDEX_INST.rstbar
Receiver   : EXMEM_INST.resetbar
Receiver   : DATA_MEMORY_INST.reset
Receiver   : MEMWB_INST.resetbar
Receiver   : Proc0.resetbar</title></polyline>
   <g transform="translate(75264,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">resetbar</text>
   </g>
   <polyline points="75488,27872 75488,27936 75552,27904 75488,27872"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : debug_clk
Mode          : input
Type          : std_logic
On sens. list : yes
Net           : debug_clk</title></polyline>
   <circle cx="75512" cy="27904" r="6"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="75488" y1="27904" x2="75456" y2="27904" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75456,27936 75376,27936 75328,27904 75376,27872 75456,27872 75456,27936"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : debug_clk
Net        : debug_clk
Type       : std_logic
Comment    : Unified debug interface (48 bits total)
HDL object : input port -&gt; debug_clk
Driver     : debug_clk
Receiver   : instruction_memory_inst.debug_clk
Receiver   : REGFILE_INST.debug_clk
Receiver   : DATA_MEMORY_INST.debug_clk
Receiver   : Proc0.debug_clk</title></polyline>
   <g transform="translate(75264,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">debug_clk</text>
   </g>
   <polyline points="75488,28000 75488,28064 75552,28032 75488,28000"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : rf_data_out
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : rf_data_out</title></polyline>
   <line x1="75488" y1="28032" x2="75456" y2="28032" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75488,28128 75488,28192 75552,28160 75488,28128"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : dm_enable
Mode          : input
Type          : std_logic
On sens. list : yes
Net           : dm_enable</title></polyline>
   <circle cx="75512" cy="28160" r="6"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="75488" y1="28160" x2="75456" y2="28160" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75488,28256 75488,28320 75552,28288 75488,28256"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port          : dm_data_out
Mode          : input
Type          : std_logic_vector(31 downto 0)
On sens. list : no
Net           : dm_data_out</title></polyline>
   <line x1="75488" y1="28288" x2="75456" y2="28288" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="75808,27616 75808,27680 75872,27648 75808,27616"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : debug_data
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : debug_data</title></polyline>
   <line x1="75872" y1="27648" x2="75904" y2="27648" stroke="rgb(255,0,255)" stroke-width="3"/>
   <a href="design_internal_connections_behavioral_concurrent0_csj635gb.htm" target="_top">

   <rect x="47040" y="28928" width="320" height="1152" rx="96"
 fill="rgb(255,165,0)" stroke="rgb(60,60,60)" stroke-width="3" stroke-dasharray="1,3"/>
    </a>

   <g transform="translate(47040,28928)">
   <text font-family="" font-size="128" fill="rgb(0,0,0)" text-anchor="start" dominant-baseline="ideographic">concurrent0(V)</text>
   </g>
   <polyline points="47328,29024 47328,29088 47392,29056 47328,29024"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pc_pcout_to_ifid
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pc_pcout_to_ifid</title></polyline>
   <line x1="47392" y1="29056" x2="47424" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29024 47008,29088 47072,29056 47008,29024"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pc_pcout_to_instruction_memory
Mode : input
Type : std_logic_vector(15 downto 0)
Net  : pc_pcout_to_instruction_memory</title></polyline>
   <line x1="47008" y1="29056" x2="46976" y2="29056" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29152 47328,29216 47392,29184 47328,29152"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : pc_pcout_to_pc4adder
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : pc_pcout_to_pc4adder</title></polyline>
   <line x1="47392" y1="29184" x2="47424" y2="29184" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29280 47328,29344 47392,29312 47328,29280"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifid_pcout_to_pcimmadder
Mode : output
Type : std_logic_vector(15 downto 0)
Net  : ifid_pcout_to_pcimmadder</title></polyline>
   <line x1="47392" y1="29312" x2="47424" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29152 47008,29216 47072,29184 47008,29152"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifid_pcout_to_OUT
Mode : input
Type : std_logic_vector(15 downto 0)
Net  : ifid_pcout_to_OUT</title></polyline>
   <line x1="47008" y1="29184" x2="46976" y2="29184" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29408 47328,29472 47392,29440 47328,29408"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifid_instruction_to_immediategen
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : ifid_instruction_to_immediategen</title></polyline>
   <line x1="47392" y1="29440" x2="47424" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29280 47008,29344 47072,29312 47008,29280"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : ifid_instruction_to_OUT
Mode : input
Type : std_logic_vector(31 downto 0)
Net  : ifid_instruction_to_OUT</title></polyline>
   <line x1="47008" y1="29312" x2="46976" y2="29312" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="46976,29344 46896,29344 46848,29312 46896,29280 46976,29280 46976,29344"
 fill="rgb(255,0,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>CBN        : ifid_instruction_to_OUT
Net        : ifid_instruction_to_OUT
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; ifid_instruction_to_OUT
Driver     : ifid_instance.ifidinstructionout
Receiver   : CONTROLUNIT_INST.instruction
Receiver   : HAZARD_UNIT_INST.instruction
Receiver   : IDEX_INST.instructionin
Receiver   : concurrent0.ifid_instruction_to_OUT</title></polyline>
   <g transform="translate(46784,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,0)" text-anchor="end" dominant-baseline="central">ifid_instruction_to_OUT</text>
   </g>
   <polyline points="47328,29536 47328,29600 47392,29568 47328,29536"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : registers_reg1out_to_controlunit
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : registers_reg1out_to_controlunit</title></polyline>
   <line x1="47392" y1="29568" x2="47424" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29408 47008,29472 47072,29440 47008,29408"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : registers_reg1out_to_idex
Mode : input
Type : std_logic_vector(31 downto 0)
Net  : registers_reg1out_to_idex</title></polyline>
   <line x1="47008" y1="29440" x2="46976" y2="29440" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29664 47328,29728 47392,29696 47328,29664"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : registers_reg2out_to_controlunit
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : registers_reg2out_to_controlunit</title></polyline>
   <line x1="47392" y1="29696" x2="47424" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29536 47008,29600 47072,29568 47008,29536"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : registers_reg2out_to_idex
Mode : input
Type : std_logic_vector(31 downto 0)
Net  : registers_reg2out_to_idex</title></polyline>
   <line x1="47008" y1="29568" x2="46976" y2="29568" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29792 47328,29856 47392,29824 47328,29792"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : alusrcmuxb_source2_to_exmem
Mode : output
Type : std_logic_vector(31 downto 0)
Net  : alusrcmuxb_source2_to_exmem</title></polyline>
   <line x1="47392" y1="29824" x2="47424" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29664 47008,29728 47072,29696 47008,29664"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : alusrcmuxB_rs2_to_alu
Mode : input
Type : std_logic_vector(31 downto 0)
Net  : alusrcmuxB_rs2_to_alu</title></polyline>
   <line x1="47008" y1="29696" x2="46976" y2="29696" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47328,29920 47328,29984 47392,29952 47328,29920"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : branchand_regwritecancel_to_exmem
Mode : output
Type : std_logic
Net  : branchand_regwritecancel_to_exmem</title></polyline>
   <line x1="47392" y1="29952" x2="47424" y2="29952" stroke="rgb(255,0,255)" stroke-width="3"/>
   <polyline points="47008,29792 47008,29856 47072,29824 47008,29792"
 fill="rgb(255,255,255)" stroke="rgb(255,0,255)" stroke-width="3">
<title>Port : branchand_jumpbranchselect_to_pc_mux
Mode : input
Type : std_logic
Net  : branchand_jumpbranchselect_to_pc_mux</title></polyline>
   <line x1="47008" y1="29824" x2="46976" y2="29824" stroke="rgb(255,0,255)" stroke-width="3"/>
   <line x1="25728" y1="27136" x2="61312" y2="27136" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="25728" y1="27136" x2="25728" y2="26880" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="25728" y1="26880" x2="320" y2="26880" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="61312" y1="27264" x2="61312" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="61312" y1="28928" x2="62144" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="61312" y1="27136" x2="61312" y2="27264" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="69184" y1="27264" x2="61312" y2="27264" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="69184" y1="27264" x2="69184" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="69184" y1="28672" x2="70784" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="25728" y1="30848" x2="25728" y2="27136" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <line x1="25728" y1="30848" x2="26048" y2="30848" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></line>
   <circle cx="25728" cy="27136" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></circle>
   <circle cx="61312" cy="27264" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : debug_addr
Type       : std_logic_vector(6 downto 0)
Comment    : 7 bits (128 addresses)
HDL object : input port -&gt; debug_addr
Driver     : debug_addr
Receiver   : instruction_memory_inst.debug_addr
Receiver   : REGFILE_INST.debug_address
Receiver   : DATA_MEMORY_INST.debug_address</title></circle>
   <line x1="76224" y1="29312" x2="65344" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <line x1="76224" y1="29312" x2="76224" y2="27648" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <line x1="76224" y1="27648" x2="76992" y2="27648" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <line x1="65344" y1="29312" x2="65344" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <line x1="65344" y1="28672" x2="64448" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <line x1="75904" y1="27648" x2="76224" y2="27648" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></line>
   <circle cx="76224" cy="27648" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : debug_data
Type       : std_logic_vector(31 downto 0)
HDL object : inout port -&gt; debug_data
Driver     : debug_data
Driver     : instruction_memory_inst.debug_data
Driver     : Proc0.debug_data</title></circle>
   <line x1="69248" y1="27200" x2="25664" y2="27200" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="69248" y1="27264" x2="69248" y2="28800" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="69248" y1="28800" x2="70784" y2="28800" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="25664" y1="27200" x2="25664" y2="27008" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="25664" y1="27008" x2="320" y2="27008" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="69248" y1="27200" x2="69248" y2="27264" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="74432" y1="27264" x2="69248" y2="27264" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="74432" y1="27264" x2="74432" y2="27648" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <line x1="74432" y1="27648" x2="75456" y2="27648" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></line>
   <circle cx="69248" cy="27264" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : rf_enable
Type       : std_logic
Comment    : Register File read enable
HDL object : input port -&gt; rf_enable
Driver     : rf_enable
Receiver   : REGFILE_INST.debug_read_enable
Receiver   : Proc0.rf_enable</title></circle>
   <line x1="61376" y1="28032" x2="320" y2="28032" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : im_enable
Type       : std_logic
Comment    : Instruction Memory write enable
HDL object : input port -&gt; im_enable
Driver     : im_enable
Receiver   : instruction_memory_inst.debug_we</title></line>
   <line x1="61376" y1="28032" x2="61376" y2="29056" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : im_enable
Type       : std_logic
Comment    : Instruction Memory write enable
HDL object : input port -&gt; im_enable
Driver     : im_enable
Receiver   : instruction_memory_inst.debug_we</title></line>
   <line x1="61376" y1="29056" x2="62144" y2="29056" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : im_enable
Type       : std_logic
Comment    : Instruction Memory write enable
HDL object : input port -&gt; im_enable
Driver     : im_enable
Receiver   : instruction_memory_inst.debug_we</title></line>
   <line x1="24512" y1="27264" x2="24512" y2="30976" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="24512" y1="27264" x2="320" y2="27264" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="25728" y1="30976" x2="26048" y2="30976" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="24512" y1="30976" x2="25728" y2="30976" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="25728" y1="31488" x2="25728" y2="30976" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="25728" y1="31488" x2="74432" y2="31488" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="74432" y1="31488" x2="74432" y2="28160" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <line x1="74432" y1="28160" x2="75456" y2="28160" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></line>
   <circle cx="25728" cy="30976" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : dm_enable
Type       : std_logic
Comment    : Data Memory read enable
HDL object : input port -&gt; dm_enable
Driver     : dm_enable
Receiver   : DATA_MEMORY_INST.debug_read_enable
Receiver   : Proc0.dm_enable</title></circle>
   <line x1="74112" y1="28032" x2="75456" y2="28032" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : rf_data_out
Type       : std_logic_vector(31 downto 0)
Comment    : Internal signals for data routing
HDL object : net -&gt; rf_data_out
Driver     : REGFILE_INST.debug_data
Receiver   : Proc0.rf_data_out</title></line>
   <g transform="translate(74784,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">rf_data_out(31:0)</text>
   </g>
   <line x1="30080" y1="31104" x2="74496" y2="31104" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : dm_data_out
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; dm_data_out
Driver     : DATA_MEMORY_INST.debug_data
Receiver   : Proc0.dm_data_out</title></line>
   <line x1="30080" y1="31104" x2="30080" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : dm_data_out
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; dm_data_out
Driver     : DATA_MEMORY_INST.debug_data
Receiver   : Proc0.dm_data_out</title></line>
   <line x1="30080" y1="30080" x2="28480" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : dm_data_out
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; dm_data_out
Driver     : DATA_MEMORY_INST.debug_data
Receiver   : Proc0.dm_data_out</title></line>
   <line x1="74496" y1="31104" x2="74496" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : dm_data_out
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; dm_data_out
Driver     : DATA_MEMORY_INST.debug_data
Receiver   : Proc0.dm_data_out</title></line>
   <line x1="74496" y1="28288" x2="75456" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : dm_data_out
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; dm_data_out
Driver     : DATA_MEMORY_INST.debug_data
Receiver   : Proc0.dm_data_out</title></line>
   <g transform="translate(52288,31104)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">dm_data_out(31:0)</text>
   </g>
   <line x1="54848" y1="27968" x2="64768" y2="27968" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="54848" y1="27968" x2="54848" y2="28928" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="54848" y1="28928" x2="55168" y2="28928" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="64768" y1="27968" x2="64768" y2="28288" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="64768" y1="28288" x2="65664" y2="28288" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="51584" y1="27968" x2="54848" y2="27968" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="51584" y1="27968" x2="51584" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="46656" y1="26240" x2="44864" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="51584" y1="26240" x2="46656" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="46656" y1="29824" x2="46656" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <line x1="46656" y1="29824" x2="46976" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></line>
   <circle cx="54848" cy="27968" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></circle>
   <circle cx="46656" cy="26240" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_jumpbranchselect_to_pc_mux
Type       : std_logic
Comment    : XXX &amp; PC MUX
HDL object : net -&gt; branchand_jumpbranchselect_to_pc_mux
Driver     : BRANCH_AND_INST.BranchResponse
Receiver   : pc_mux_inst.branch
Receiver   : ifid_instance.branch_taken
Receiver   : concurrent0.branchand_jumpbranchselect_to_pc_mux</title></circle>
   <g transform="translate(59808,27968)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">branchand_jumpbranchselect_to_pc_mux</text>
   </g>
   <line x1="54784" y1="29184" x2="54784" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc4adder_pcplus4_to_pc_mux
Type       : std_logic_vector(15 downto 0)
Comment    : PC4ADDER &amp; PC MUX
HDL object : net -&gt; pc4adder_pcplus4_to_pc_mux
Driver     : pc_4_adder_instance.pcplus4
Receiver   : pc_mux_inst.pcplus4</title></line>
   <line x1="54784" y1="29184" x2="55168" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc4adder_pcplus4_to_pc_mux
Type       : std_logic_vector(15 downto 0)
Comment    : PC4ADDER &amp; PC MUX
HDL object : net -&gt; pc4adder_pcplus4_to_pc_mux
Driver     : pc_4_adder_instance.pcplus4
Receiver   : pc_mux_inst.pcplus4</title></line>
   <line x1="54784" y1="26240" x2="53824" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc4adder_pcplus4_to_pc_mux
Type       : std_logic_vector(15 downto 0)
Comment    : PC4ADDER &amp; PC MUX
HDL object : net -&gt; pc4adder_pcplus4_to_pc_mux
Driver     : pc_4_adder_instance.pcplus4
Receiver   : pc_mux_inst.pcplus4</title></line>
   <g transform="translate(54784,27712)">
   <g transform="rotate(90)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pc4adder_pcplus4_to_pc_mux(15:0)</text>
   </g>
   </g>
   <line x1="55168" y1="29312" x2="54080" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pcplusimmadder_pcplusimm_to_pc_mux
Type       : std_logic_vector(15 downto 0)
Comment    : PC4ADDER &amp; PC MUX
HDL object : net -&gt; pcplusimmadder_pcplusimm_to_pc_mux
Driver     : pcimmadder_inst.pcplusimm
Receiver   : pc_mux_inst.pcplusimm</title></line>
   <g transform="translate(54624,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pcplusimmadder_pcplusimm_to_pc_mux(15:0)</text>
   </g>
   <line x1="7616" y1="30080" x2="10048" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_branch_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_branch_to_idex
Driver     : CONTROLUNIT_INST.Branch
Receiver   : IDEX_INST.Branchin</title></line>
   <g transform="translate(8832,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_branch_to_idex</text>
   </g>
   <line x1="9728" y1="27904" x2="54400" y2="27904" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_earlybranch_to_pcmux
Type       : std_logic
HDL object : net -&gt; controlunit_earlybranch_to_pcmux
Driver     : CONTROLUNIT_INST.early_branch
Receiver   : pc_mux_inst.earlybranchcontrolunit</title></line>
   <line x1="9728" y1="27904" x2="9728" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_earlybranch_to_pcmux
Type       : std_logic
HDL object : net -&gt; controlunit_earlybranch_to_pcmux
Driver     : CONTROLUNIT_INST.early_branch
Receiver   : pc_mux_inst.earlybranchcontrolunit</title></line>
   <line x1="9728" y1="30592" x2="7616" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_earlybranch_to_pcmux
Type       : std_logic
HDL object : net -&gt; controlunit_earlybranch_to_pcmux
Driver     : CONTROLUNIT_INST.early_branch
Receiver   : pc_mux_inst.earlybranchcontrolunit</title></line>
   <line x1="54400" y1="27904" x2="54400" y2="29056" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_earlybranch_to_pcmux
Type       : std_logic
HDL object : net -&gt; controlunit_earlybranch_to_pcmux
Driver     : CONTROLUNIT_INST.early_branch
Receiver   : pc_mux_inst.earlybranchcontrolunit</title></line>
   <line x1="54400" y1="29056" x2="55168" y2="29056" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_earlybranch_to_pcmux
Type       : std_logic
HDL object : net -&gt; controlunit_earlybranch_to_pcmux
Driver     : CONTROLUNIT_INST.early_branch
Receiver   : pc_mux_inst.earlybranchcontrolunit</title></line>
   <g transform="translate(32064,27904)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_earlybranch_to_pcmux</text>
   </g>
   <line x1="48320" y1="26368" x2="51648" y2="26368" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_pc4adder
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; PC PC4ADDER
HDL object : net -&gt; pc_pcout_to_pc4adder
Driver     : concurrent0.pc_pcout_to_pc4adder
Receiver   : pc_4_adder_instance.pcout</title></line>
   <line x1="48320" y1="26368" x2="48320" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_pc4adder
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; PC PC4ADDER
HDL object : net -&gt; pc_pcout_to_pc4adder
Driver     : concurrent0.pc_pcout_to_pc4adder
Receiver   : pc_4_adder_instance.pcout</title></line>
   <line x1="48320" y1="29184" x2="47424" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_pc4adder
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; PC PC4ADDER
HDL object : net -&gt; pc_pcout_to_pc4adder
Driver     : concurrent0.pc_pcout_to_pc4adder
Receiver   : pc_4_adder_instance.pcout</title></line>
   <line x1="51648" y1="26368" x2="51648" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_pc4adder
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; PC PC4ADDER
HDL object : net -&gt; pc_pcout_to_pc4adder
Driver     : concurrent0.pc_pcout_to_pc4adder
Receiver   : pc_4_adder_instance.pcout</title></line>
   <line x1="51648" y1="26240" x2="51904" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_pc4adder
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; PC PC4ADDER
HDL object : net -&gt; pc_pcout_to_pc4adder
Driver     : concurrent0.pc_pcout_to_pc4adder
Receiver   : pc_4_adder_instance.pcout</title></line>
   <g transform="translate(49984,26368)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pc_pcout_to_pc4adder(15:0)</text>
   </g>
   <line x1="58112" y1="28928" x2="58944" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_mux_pcsource_to_pc
Type       : std_logic_vector(15 downto 0)
Comment    : PC MUX &amp; PC
HDL object : net -&gt; pc_mux_pcsource_to_pc
Driver     : pc_mux_inst.pcsource
Receiver   : pc_instance.pcsource</title></line>
   <g transform="translate(58528,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pc_mux_pcsource_to_pc(15:0)</text>
   </g>
   <line x1="4736" y1="28160" x2="58432" y2="28160" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_pcwrite_to_pc
Type       : std_logic
Comment    : XXX and PC
HDL object : net -&gt; hazardunit_pcwrite_to_pc
Driver     : HAZARD_UNIT_INST.pcwriteenable
Receiver   : pc_instance.pcwrite</title></line>
   <line x1="4736" y1="28160" x2="4736" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_pcwrite_to_pc
Type       : std_logic
Comment    : XXX and PC
HDL object : net -&gt; hazardunit_pcwrite_to_pc
Driver     : HAZARD_UNIT_INST.pcwriteenable
Receiver   : pc_instance.pcwrite</title></line>
   <line x1="4736" y1="30336" x2="3712" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_pcwrite_to_pc
Type       : std_logic
Comment    : XXX and PC
HDL object : net -&gt; hazardunit_pcwrite_to_pc
Driver     : HAZARD_UNIT_INST.pcwriteenable
Receiver   : pc_instance.pcwrite</title></line>
   <line x1="58432" y1="28160" x2="58432" y2="28800" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_pcwrite_to_pc
Type       : std_logic
Comment    : XXX and PC
HDL object : net -&gt; hazardunit_pcwrite_to_pc
Driver     : HAZARD_UNIT_INST.pcwriteenable
Receiver   : pc_instance.pcwrite</title></line>
   <line x1="58432" y1="28800" x2="58944" y2="28800" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_pcwrite_to_pc
Type       : std_logic
Comment    : XXX and PC
HDL object : net -&gt; hazardunit_pcwrite_to_pc
Driver     : HAZARD_UNIT_INST.pcwriteenable
Receiver   : pc_instance.pcwrite</title></line>
   <g transform="translate(31584,28160)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">hazardunit_pcwrite_to_pc</text>
   </g>
   <line x1="61440" y1="28544" x2="60992" y2="28544" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <line x1="62144" y1="28544" x2="61440" y2="28544" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <line x1="61440" y1="30464" x2="61440" y2="28544" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <line x1="61440" y1="30464" x2="46592" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <line x1="46592" y1="30464" x2="46592" y2="29056" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <line x1="46592" y1="29056" x2="46976" y2="29056" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></line>
   <circle cx="61440" cy="28544" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : pc_pcout_to_instruction_memory
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; instruction memory
HDL object : net -&gt; pc_pcout_to_instruction_memory
Driver     : pc_instance.pcout
Receiver   : instruction_memory_inst.pc_address
Receiver   : concurrent0.pc_pcout_to_instruction_memory</title></circle>
   <g transform="translate(54016,30464)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pc_pcout_to_instruction_memory(15:0)</text>
   </g>
   <line x1="64448" y1="28544" x2="65664" y2="28544" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : instruction_memory_instruction_to_ifid
Type       : std_logic_vector(31 downto 0)
Comment    : instruction memory &amp; ifid
HDL object : net -&gt; instruction_memory_instruction_to_ifid
Driver     : instruction_memory_inst.instruction
Receiver   : ifid_instance.instruction</title></line>
   <g transform="translate(65056,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">instruction_memory_instruction_to_ifid(31:0)</text>
   </g>
   <line x1="48256" y1="30080" x2="64768" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_ifid
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; ifid
HDL object : net -&gt; pc_pcout_to_ifid
Driver     : concurrent0.pc_pcout_to_ifid
Receiver   : ifid_instance.pcout</title></line>
   <line x1="48256" y1="30080" x2="48256" y2="29056" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_ifid
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; ifid
HDL object : net -&gt; pc_pcout_to_ifid
Driver     : concurrent0.pc_pcout_to_ifid
Receiver   : ifid_instance.pcout</title></line>
   <line x1="48256" y1="29056" x2="47424" y2="29056" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_ifid
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; ifid
HDL object : net -&gt; pc_pcout_to_ifid
Driver     : concurrent0.pc_pcout_to_ifid
Receiver   : ifid_instance.pcout</title></line>
   <line x1="64768" y1="30080" x2="64768" y2="28416" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_ifid
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; ifid
HDL object : net -&gt; pc_pcout_to_ifid
Driver     : concurrent0.pc_pcout_to_ifid
Receiver   : ifid_instance.pcout</title></line>
   <line x1="64768" y1="28416" x2="65664" y2="28416" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : pc_pcout_to_ifid
Type       : std_logic_vector(15 downto 0)
Comment    : PC &amp; ifid
HDL object : net -&gt; pc_pcout_to_ifid
Driver     : concurrent0.pc_pcout_to_ifid
Receiver   : ifid_instance.pcout</title></line>
   <g transform="translate(56512,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">pc_pcout_to_ifid(15:0)</text>
   </g>
   <line x1="65664" y1="28032" x2="65536" y2="28032" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_ifidwrite_to_ifid
Type       : std_logic
Comment    : XXX &amp; ifid
HDL object : net -&gt; hazardunit_ifidwrite_to_ifid
Receiver   : ifid_instance.ifidwrite</title></line>
   <line x1="65520" y1="28016" x2="65552" y2="28048" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_ifidwrite_to_ifid
Type       : std_logic
Comment    : XXX &amp; ifid
HDL object : net -&gt; hazardunit_ifidwrite_to_ifid
Receiver   : ifid_instance.ifidwrite</title></line>
   <line x1="65520" y1="28048" x2="65552" y2="28016" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_ifidwrite_to_ifid
Type       : std_logic
Comment    : XXX &amp; ifid
HDL object : net -&gt; hazardunit_ifidwrite_to_ifid
Receiver   : ifid_instance.ifidwrite</title></line>
   <g transform="translate(65600,28032)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="end" dominant-baseline="ideographic">hazardunit_ifidwrite_to_ifid</text>
   </g>
   <line x1="69312" y1="28032" x2="68864" y2="28032" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <line x1="70784" y1="28032" x2="69312" y2="28032" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <line x1="69312" y1="25728" x2="69312" y2="28032" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <line x1="69312" y1="25728" x2="9664" y2="25728" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <line x1="9664" y1="25728" x2="9664" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <line x1="9664" y1="30464" x2="10048" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></line>
   <circle cx="69312" cy="28032" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : ifid_rs1_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs1_to_register
Driver     : ifid_instance.rs1_out
Receiver   : REGFILE_INST.readregister1
Receiver   : IDEX_INST.rs1in</title></circle>
   <g transform="translate(39488,25728)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_rs1_to_register(4:0)</text>
   </g>
   <line x1="69312" y1="28160" x2="68864" y2="28160" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="70784" y1="28160" x2="69312" y2="28160" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="69312" y1="31552" x2="69312" y2="28160" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="69312" y1="31552" x2="9728" y2="31552" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="9728" y1="31552" x2="9728" y2="30784" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="9728" y1="30784" x2="9792" y2="30784" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="9792" y1="30784" x2="9792" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <line x1="9792" y1="30592" x2="10048" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></line>
   <circle cx="69312" cy="28160" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : ifid_rs2_to_register
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rs2_to_register
Driver     : ifid_instance.rs2_out
Receiver   : REGFILE_INST.readregister2
Receiver   : IDEX_INST.rs2in</title></circle>
   <g transform="translate(39520,31552)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_rs2_to_register(4:0)</text>
   </g>
   <line x1="69376" y1="31616" x2="9664" y2="31616" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rd_to_idex
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rd_to_idex
Driver     : ifid_instance.rd_out
Receiver   : IDEX_INST.rdin</title></line>
   <line x1="69376" y1="31616" x2="69376" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rd_to_idex
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rd_to_idex
Driver     : ifid_instance.rd_out
Receiver   : IDEX_INST.rdin</title></line>
   <line x1="69376" y1="28288" x2="68864" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rd_to_idex
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rd_to_idex
Driver     : ifid_instance.rd_out
Receiver   : IDEX_INST.rdin</title></line>
   <line x1="9664" y1="31616" x2="9664" y2="30720" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rd_to_idex
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rd_to_idex
Driver     : ifid_instance.rd_out
Receiver   : IDEX_INST.rdin</title></line>
   <line x1="9664" y1="30720" x2="10048" y2="30720" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_rd_to_idex
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; ifid_rd_to_idex
Driver     : ifid_instance.rd_out
Receiver   : IDEX_INST.rdin</title></line>
   <g transform="translate(39520,31616)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_rd_to_idex(4:0)</text>
   </g>
   <line x1="46528" y1="30528" x2="69440" y2="30528" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_OUT
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_OUT
Driver     : ifid_instance.ifidpcout
Receiver   : concurrent0.ifid_pcout_to_OUT</title></line>
   <line x1="46528" y1="30528" x2="46528" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_OUT
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_OUT
Driver     : ifid_instance.ifidpcout
Receiver   : concurrent0.ifid_pcout_to_OUT</title></line>
   <line x1="46528" y1="29184" x2="46976" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_OUT
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_OUT
Driver     : ifid_instance.ifidpcout
Receiver   : concurrent0.ifid_pcout_to_OUT</title></line>
   <line x1="69440" y1="30528" x2="69440" y2="27904" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_OUT
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_OUT
Driver     : ifid_instance.ifidpcout
Receiver   : concurrent0.ifid_pcout_to_OUT</title></line>
   <line x1="69440" y1="27904" x2="68864" y2="27904" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_OUT
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_OUT
Driver     : ifid_instance.ifidpcout
Receiver   : concurrent0.ifid_pcout_to_OUT</title></line>
   <g transform="translate(57984,30528)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_pcout_to_OUT(15:0)</text>
   </g>
   <line x1="48640" y1="29440" x2="47424" y2="29440" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_instruction_to_immediategen
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END       
HDL object : net -&gt; ifid_instruction_to_immediategen
Driver     : concurrent0.ifid_instruction_to_immediategen
Receiver   : imm_gen_inst.instruction</title></line>
   <g transform="translate(48032,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_instruction_to_immediategen(31:0)</text>
   </g>
   <line x1="50944" y1="29440" x2="51904" y2="29440" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_pcimmadder
Type       : std_logic_vector(31 downto 0)
Comment    : TO PCIMMADDER
HDL object : net -&gt; immediategen_immediate_to_pcimmadder
Driver     : imm_gen_inst.pcadderimm
Receiver   : pcimmadder_inst.immediate</title></line>
   <g transform="translate(51424,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">immediategen_immediate_to_pcimmadder(31:0)</text>
   </g>
   <line x1="47744" y1="28096" x2="9600" y2="28096" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="51264" y1="28096" x2="51264" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="51264" y1="29312" x2="51904" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="9600" y1="28096" x2="9600" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="9600" y1="28928" x2="10048" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="51264" y1="28096" x2="47744" y2="28096" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="47744" y1="29312" x2="47744" y2="28096" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <line x1="47744" y1="29312" x2="47424" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></line>
   <circle cx="47744" cy="28096" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : ifid_pcout_to_pcimmadder
Type       : std_logic_vector(15 downto 0)
HDL object : net -&gt; ifid_pcout_to_pcimmadder
Driver     : concurrent0.ifid_pcout_to_pcimmadder
Receiver   : pcimmadder_inst.pc
Receiver   : IDEX_INST.pcin</title></circle>
   <g transform="translate(28672,28096)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">ifid_pcout_to_pcimmadder(15:0)</text>
   </g>
   <line x1="51328" y1="27968" x2="9536" y2="27968" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_idex
Type       : std_logic_vector(31 downto 0)
Comment    : TO IDEX
HDL object : net -&gt; immediategen_immediate_to_idex
Driver     : imm_gen_inst.immediate
Receiver   : IDEX_INST.immediatein</title></line>
   <line x1="51328" y1="27968" x2="51328" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_idex
Type       : std_logic_vector(31 downto 0)
Comment    : TO IDEX
HDL object : net -&gt; immediategen_immediate_to_idex
Driver     : imm_gen_inst.immediate
Receiver   : IDEX_INST.immediatein</title></line>
   <line x1="51328" y1="29568" x2="50944" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_idex
Type       : std_logic_vector(31 downto 0)
Comment    : TO IDEX
HDL object : net -&gt; immediategen_immediate_to_idex
Driver     : imm_gen_inst.immediate
Receiver   : IDEX_INST.immediatein</title></line>
   <line x1="9536" y1="27968" x2="9536" y2="29440" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_idex
Type       : std_logic_vector(31 downto 0)
Comment    : TO IDEX
HDL object : net -&gt; immediategen_immediate_to_idex
Driver     : imm_gen_inst.immediate
Receiver   : IDEX_INST.immediatein</title></line>
   <line x1="9536" y1="29440" x2="10048" y2="29440" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : immediategen_immediate_to_idex
Type       : std_logic_vector(31 downto 0)
Comment    : TO IDEX
HDL object : net -&gt; immediategen_immediate_to_idex
Driver     : imm_gen_inst.immediate
Receiver   : IDEX_INST.immediatein</title></line>
   <g transform="translate(30432,27968)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">immediategen_immediate_to_idex(31:0)</text>
   </g>
   <line x1="34688" y1="27072" x2="69504" y2="27072" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <line x1="34688" y1="27072" x2="34688" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <line x1="34688" y1="30080" x2="35008" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <line x1="69504" y1="27072" x2="69504" y2="27904" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <line x1="69504" y1="27904" x2="70784" y2="27904" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <line x1="33088" y1="30080" x2="34688" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></line>
   <circle cx="34688" cy="30080" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_regwrite_to_registers
Type       : std_logic
Comment    : TO REGISTER FILE
HDL object : net -&gt; memwb_regwrite_to_registers
Driver     : MEMWB_INST.RegWrite
Receiver   : REGFILE_INST.regwrite
Receiver   : FORWARDING_UNIT_INST.memwbregwritecntrl</title></circle>
   <g transform="translate(52096,27072)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">memwb_regwrite_to_registers</text>
   </g>
   <line x1="46464" y1="25664" x2="9472" y2="25664" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="74496" y1="25664" x2="74496" y2="27776" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="74496" y1="27776" x2="74112" y2="27776" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="9472" y1="25664" x2="9472" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="9472" y1="29184" x2="10048" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="74496" y1="25664" x2="46464" y2="25664" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="46464" y1="29440" x2="46464" y2="25664" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <line x1="46464" y1="29440" x2="46976" y2="29440" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></line>
   <circle cx="46464" cy="25664" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : registers_reg1out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_idex
Driver     : REGFILE_INST.readdata1
Receiver   : IDEX_INST.readdata1in
Receiver   : concurrent0.registers_reg1out_to_idex</title></circle>
   <g transform="translate(27968,25664)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">registers_reg1out_to_idex(31:0)</text>
   </g>
   <line x1="46400" y1="25600" x2="9408" y2="25600" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="74560" y1="25600" x2="74560" y2="27904" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="74560" y1="27904" x2="74112" y2="27904" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="9408" y1="25600" x2="9408" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="9408" y1="29312" x2="10048" y2="29312" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="74560" y1="25600" x2="46400" y2="25600" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="46400" y1="29568" x2="46400" y2="25600" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <line x1="46400" y1="29568" x2="46976" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></line>
   <circle cx="46400" cy="25600" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : registers_reg2out_to_idex
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_idex
Driver     : REGFILE_INST.readdata2
Receiver   : IDEX_INST.readdata2in
Receiver   : concurrent0.registers_reg2out_to_idex</title></circle>
   <g transform="translate(27904,25600)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">registers_reg2out_to_idex(31:0)</text>
   </g>
   <line x1="5056" y1="30592" x2="3712" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_controldisable_to_controlunit
Type       : std_logic
Comment    : TO CONTROL UNIT
HDL object : net -&gt; hazardunit_controldisable_to_controlunit
Driver     : HAZARD_UNIT_INST.ctrl_disable
Receiver   : CONTROLUNIT_INST.ctrl_disable</title></line>
   <g transform="translate(4384,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">hazardunit_controldisable_to_controlunit</text>
   </g>
   <line x1="5056" y1="29696" x2="4928" y2="29696" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_cntrlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_cntrlsigmux_to_controlunit
Receiver   : CONTROLUNIT_INST.cntrlsigmux</title></line>
   <line x1="4912" y1="29680" x2="4944" y2="29712" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_cntrlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_cntrlsigmux_to_controlunit
Receiver   : CONTROLUNIT_INST.cntrlsigmux</title></line>
   <line x1="4912" y1="29712" x2="4944" y2="29680" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_cntrlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_cntrlsigmux_to_controlunit
Receiver   : CONTROLUNIT_INST.cntrlsigmux</title></line>
   <g transform="translate(4992,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="end" dominant-baseline="ideographic">hazardunit_cntrlsigmux_to_controlunit</text>
   </g>
   <line x1="4672" y1="27840" x2="47808" y2="27840" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_controlunit
Driver     : concurrent0.registers_reg1out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs1_data</title></line>
   <line x1="4672" y1="27840" x2="4672" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_controlunit
Driver     : concurrent0.registers_reg1out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs1_data</title></line>
   <line x1="4672" y1="29824" x2="5056" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_controlunit
Driver     : concurrent0.registers_reg1out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs1_data</title></line>
   <line x1="47808" y1="27840" x2="47808" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_controlunit
Driver     : concurrent0.registers_reg1out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs1_data</title></line>
   <line x1="47808" y1="29568" x2="47424" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg1out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg1out_to_controlunit
Driver     : concurrent0.registers_reg1out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs1_data</title></line>
   <g transform="translate(26240,27840)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">registers_reg1out_to_controlunit(31:0)</text>
   </g>
   <line x1="4608" y1="27776" x2="47872" y2="27776" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_controlunit
Driver     : concurrent0.registers_reg2out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs2_data</title></line>
   <line x1="4608" y1="27776" x2="4608" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_controlunit
Driver     : concurrent0.registers_reg2out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs2_data</title></line>
   <line x1="4608" y1="29952" x2="5056" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_controlunit
Driver     : concurrent0.registers_reg2out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs2_data</title></line>
   <line x1="47872" y1="27776" x2="47872" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_controlunit
Driver     : concurrent0.registers_reg2out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs2_data</title></line>
   <line x1="47872" y1="29696" x2="47424" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : registers_reg2out_to_controlunit
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; registers_reg2out_to_controlunit
Driver     : concurrent0.registers_reg2out_to_controlunit
Receiver   : CONTROLUNIT_INST.rs2_data</title></line>
   <g transform="translate(26240,27776)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">registers_reg2out_to_controlunit(31:0)</text>
   </g>
   <line x1="7616" y1="29568" x2="10048" y2="29568" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_memtoreg_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_memtoreg_to_idex
Driver     : CONTROLUNIT_INST.MemtoReg
Receiver   : IDEX_INST.MemtoRegin</title></line>
   <g transform="translate(8832,29568)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_memtoreg_to_idex</text>
   </g>
   <line x1="7616" y1="29696" x2="10048" y2="29696" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_regwrite_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_regwrite_to_idex
Driver     : CONTROLUNIT_INST.RegWrite
Receiver   : IDEX_INST.RegWritein</title></line>
   <g transform="translate(8832,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_regwrite_to_idex</text>
   </g>
   <line x1="7616" y1="29824" x2="10048" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_memread_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_memread_to_idex
Driver     : CONTROLUNIT_INST.MemRead
Receiver   : IDEX_INST.MemReadin</title></line>
   <g transform="translate(8832,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_memread_to_idex</text>
   </g>
   <line x1="7616" y1="29952" x2="10048" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_memwrite_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_memwrite_to_idex
Driver     : CONTROLUNIT_INST.MemWrite
Receiver   : IDEX_INST.MemWritein</title></line>
   <g transform="translate(8832,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_memwrite_to_idex</text>
   </g>
   <line x1="7616" y1="30208" x2="10048" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_alusource_to_idex
Type       : std_logic
HDL object : net -&gt; controlunit_alusource_to_idex
Driver     : CONTROLUNIT_INST.ALUSrc
Receiver   : IDEX_INST.ALUSrcin</title></line>
   <g transform="translate(8832,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_alusource_to_idex</text>
   </g>
   <line x1="7616" y1="30336" x2="10048" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : contolunit_aluop_to_idex
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; contolunit_aluop_to_idex
Driver     : CONTROLUNIT_INST.ALUOp
Receiver   : IDEX_INST.ALUOpin</title></line>
   <g transform="translate(8832,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">contolunit_aluop_to_idex(1:0)</text>
   </g>
   <line x1="64832" y1="27712" x2="9344" y2="27712" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_ifflush_to_ifid
Type       : std_logic
HDL object : net -&gt; controlunit_ifflush_to_ifid
Driver     : CONTROLUNIT_INST.if_flush
Receiver   : ifid_instance.ifidflush</title></line>
   <line x1="64832" y1="27712" x2="64832" y2="28160" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_ifflush_to_ifid
Type       : std_logic
HDL object : net -&gt; controlunit_ifflush_to_ifid
Driver     : CONTROLUNIT_INST.if_flush
Receiver   : ifid_instance.ifidflush</title></line>
   <line x1="64832" y1="28160" x2="65664" y2="28160" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_ifflush_to_ifid
Type       : std_logic
HDL object : net -&gt; controlunit_ifflush_to_ifid
Driver     : CONTROLUNIT_INST.if_flush
Receiver   : ifid_instance.ifidflush</title></line>
   <line x1="9344" y1="27712" x2="9344" y2="30464" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_ifflush_to_ifid
Type       : std_logic
HDL object : net -&gt; controlunit_ifflush_to_ifid
Driver     : CONTROLUNIT_INST.if_flush
Receiver   : ifid_instance.ifidflush</title></line>
   <line x1="9344" y1="30464" x2="7616" y2="30464" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : controlunit_ifflush_to_ifid
Type       : std_logic
HDL object : net -&gt; controlunit_ifflush_to_ifid
Driver     : CONTROLUNIT_INST.if_flush
Receiver   : ifid_instance.ifidflush</title></line>
   <g transform="translate(37088,27712)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">controlunit_ifflush_to_ifid</text>
   </g>
   <line x1="3712" y1="30208" x2="3840" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_controlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_controlsigmux_to_controlunit
Driver     : HAZARD_UNIT_INST.cntrlsigmux</title></line>
   <line x1="3824" y1="30192" x2="3856" y2="30224" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_controlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_controlsigmux_to_controlunit
Driver     : HAZARD_UNIT_INST.cntrlsigmux</title></line>
   <line x1="3824" y1="30224" x2="3856" y2="30192" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : hazardunit_controlsigmux_to_controlunit
Type       : std_logic
HDL object : net -&gt; hazardunit_controlsigmux_to_controlunit
Driver     : HAZARD_UNIT_INST.cntrlsigmux</title></line>
   <g transform="translate(3776,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="start" dominant-baseline="ideographic">hazardunit_controlsigmux_to_controlunit</text>
   </g>
   <line x1="17600" y1="30464" x2="20416" y2="30464" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memtoreg_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memtoreg_to_exmem
Driver     : IDEX_INST.MemtoRegout
Receiver   : EXMEM_INST.MemtoRegin</title></line>
   <line x1="17600" y1="30464" x2="17600" y2="29312" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memtoreg_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memtoreg_to_exmem
Driver     : IDEX_INST.MemtoRegout
Receiver   : EXMEM_INST.MemtoRegin</title></line>
   <line x1="17600" y1="29312" x2="12736" y2="29312" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memtoreg_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memtoreg_to_exmem
Driver     : IDEX_INST.MemtoRegout
Receiver   : EXMEM_INST.MemtoRegin</title></line>
   <line x1="20416" y1="30464" x2="20416" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memtoreg_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memtoreg_to_exmem
Driver     : IDEX_INST.MemtoRegout
Receiver   : EXMEM_INST.MemtoRegin</title></line>
   <line x1="20416" y1="30080" x2="21760" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memtoreg_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memtoreg_to_exmem
Driver     : IDEX_INST.MemtoRegout
Receiver   : EXMEM_INST.MemtoRegin</title></line>
   <g transform="translate(15168,29312)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_memtoreg_to_exmem</text>
   </g>
   <line x1="17536" y1="30528" x2="20480" y2="30528" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_regwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_regwrite_to_exmem
Driver     : IDEX_INST.RegWriteout
Receiver   : EXMEM_INST.RegWritein</title></line>
   <line x1="17536" y1="30528" x2="17536" y2="29440" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_regwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_regwrite_to_exmem
Driver     : IDEX_INST.RegWriteout
Receiver   : EXMEM_INST.RegWritein</title></line>
   <line x1="17536" y1="29440" x2="12736" y2="29440" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_regwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_regwrite_to_exmem
Driver     : IDEX_INST.RegWriteout
Receiver   : EXMEM_INST.RegWritein</title></line>
   <line x1="20480" y1="30528" x2="20480" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_regwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_regwrite_to_exmem
Driver     : IDEX_INST.RegWriteout
Receiver   : EXMEM_INST.RegWritein</title></line>
   <line x1="20480" y1="30208" x2="21760" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_regwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_regwrite_to_exmem
Driver     : IDEX_INST.RegWriteout
Receiver   : EXMEM_INST.RegWritein</title></line>
   <g transform="translate(15136,29440)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_regwrite_to_exmem</text>
   </g>
   <line x1="1088" y1="31232" x2="13056" y2="31232" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="1088" y1="31232" x2="1088" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="1088" y1="30208" x2="1408" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="13056" y1="30592" x2="13056" y2="29568" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="13056" y1="29568" x2="12736" y2="29568" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="13056" y1="31232" x2="13056" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="20544" y1="30592" x2="13056" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="20544" y1="30592" x2="20544" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <line x1="20544" y1="30336" x2="21760" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></line>
   <circle cx="13056" cy="30592" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memread_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memread_to_exmem
Driver     : IDEX_INST.MemReadout
Receiver   : HAZARD_UNIT_INST.idexmemread
Receiver   : EXMEM_INST.MemReadin</title></circle>
   <g transform="translate(7072,31232)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_memread_to_exmem</text>
   </g>
   <line x1="14272" y1="30656" x2="20608" y2="30656" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memwrite_to_exmem
Driver     : IDEX_INST.MemWriteout
Receiver   : EXMEM_INST.MemWritein</title></line>
   <line x1="14272" y1="30656" x2="14272" y2="29696" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memwrite_to_exmem
Driver     : IDEX_INST.MemWriteout
Receiver   : EXMEM_INST.MemWritein</title></line>
   <line x1="14272" y1="29696" x2="12736" y2="29696" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memwrite_to_exmem
Driver     : IDEX_INST.MemWriteout
Receiver   : EXMEM_INST.MemWritein</title></line>
   <line x1="20608" y1="30656" x2="20608" y2="30464" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memwrite_to_exmem
Driver     : IDEX_INST.MemWriteout
Receiver   : EXMEM_INST.MemWritein</title></line>
   <line x1="20608" y1="30464" x2="21760" y2="30464" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_memwrite_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_memwrite_to_exmem
Driver     : IDEX_INST.MemWriteout
Receiver   : EXMEM_INST.MemWritein</title></line>
   <g transform="translate(17440,30656)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_memwrite_to_exmem</text>
   </g>
   <line x1="14208" y1="30720" x2="20672" y2="30720" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_branch_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_branch_to_exmem
Driver     : IDEX_INST.Branchout
Receiver   : EXMEM_INST.Branchin</title></line>
   <line x1="14208" y1="30720" x2="14208" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_branch_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_branch_to_exmem
Driver     : IDEX_INST.Branchout
Receiver   : EXMEM_INST.Branchin</title></line>
   <line x1="14208" y1="29824" x2="12736" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_branch_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_branch_to_exmem
Driver     : IDEX_INST.Branchout
Receiver   : EXMEM_INST.Branchin</title></line>
   <line x1="20672" y1="30720" x2="20672" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_branch_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_branch_to_exmem
Driver     : IDEX_INST.Branchout
Receiver   : EXMEM_INST.Branchin</title></line>
   <line x1="20672" y1="30592" x2="21760" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_branch_to_exmem
Type       : std_logic
HDL object : net -&gt; idex_branch_to_exmem
Driver     : IDEX_INST.Branchout
Receiver   : EXMEM_INST.Branchin</title></line>
   <g transform="translate(17440,30720)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_branch_to_exmem</text>
   </g>
   <line x1="14144" y1="28928" x2="42112" y2="28928" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_alusrcb_to_alusrcmuxb
Type       : std_logic
HDL object : net -&gt; idex_alusrcb_to_alusrcmuxb
Driver     : IDEX_INST.ALUSrc
Receiver   : ALU_SRC_MUX_B_INST.ALUSrcBControl</title></line>
   <line x1="14144" y1="28928" x2="14144" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_alusrcb_to_alusrcmuxb
Type       : std_logic
HDL object : net -&gt; idex_alusrcb_to_alusrcmuxb
Driver     : IDEX_INST.ALUSrc
Receiver   : ALU_SRC_MUX_B_INST.ALUSrcBControl</title></line>
   <line x1="14144" y1="29952" x2="12736" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_alusrcb_to_alusrcmuxb
Type       : std_logic
HDL object : net -&gt; idex_alusrcb_to_alusrcmuxb
Driver     : IDEX_INST.ALUSrc
Receiver   : ALU_SRC_MUX_B_INST.ALUSrcBControl</title></line>
   <line x1="42112" y1="28928" x2="42112" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_alusrcb_to_alusrcmuxb
Type       : std_logic
HDL object : net -&gt; idex_alusrcb_to_alusrcmuxb
Driver     : IDEX_INST.ALUSrc
Receiver   : ALU_SRC_MUX_B_INST.ALUSrcBControl</title></line>
   <line x1="42112" y1="29952" x2="42816" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : idex_alusrcb_to_alusrcmuxb
Type       : std_logic
HDL object : net -&gt; idex_alusrcb_to_alusrcmuxb
Driver     : IDEX_INST.ALUSrc
Receiver   : ALU_SRC_MUX_B_INST.ALUSrcBControl</title></line>
   <g transform="translate(28128,28928)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_alusrcb_to_alusrcmuxb</text>
   </g>
   <line x1="14080" y1="28864" x2="33408" y2="28864" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs1_to_forwardingunit
Driver     : IDEX_INST.rs1out
Receiver   : FORWARDING_UNIT_INST.idexrs1</title></line>
   <line x1="14080" y1="28864" x2="14080" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs1_to_forwardingunit
Driver     : IDEX_INST.rs1out
Receiver   : FORWARDING_UNIT_INST.idexrs1</title></line>
   <line x1="14080" y1="30208" x2="12736" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs1_to_forwardingunit
Driver     : IDEX_INST.rs1out
Receiver   : FORWARDING_UNIT_INST.idexrs1</title></line>
   <line x1="33408" y1="28864" x2="33408" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs1_to_forwardingunit
Driver     : IDEX_INST.rs1out
Receiver   : FORWARDING_UNIT_INST.idexrs1</title></line>
   <line x1="33408" y1="30464" x2="35008" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs1_to_forwardingunit
Driver     : IDEX_INST.rs1out
Receiver   : FORWARDING_UNIT_INST.idexrs1</title></line>
   <g transform="translate(23744,28864)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_rs1_to_forwardingunit(4:0)</text>
   </g>
   <line x1="14016" y1="28800" x2="33472" y2="28800" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs2_to_forwardingunit
Driver     : IDEX_INST.rs2out
Receiver   : FORWARDING_UNIT_INST.idexrs2</title></line>
   <line x1="14016" y1="28800" x2="14016" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs2_to_forwardingunit
Driver     : IDEX_INST.rs2out
Receiver   : FORWARDING_UNIT_INST.idexrs2</title></line>
   <line x1="14016" y1="30336" x2="12736" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs2_to_forwardingunit
Driver     : IDEX_INST.rs2out
Receiver   : FORWARDING_UNIT_INST.idexrs2</title></line>
   <line x1="33472" y1="28800" x2="33472" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs2_to_forwardingunit
Driver     : IDEX_INST.rs2out
Receiver   : FORWARDING_UNIT_INST.idexrs2</title></line>
   <line x1="33472" y1="30592" x2="35008" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingunit
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rs2_to_forwardingunit
Driver     : IDEX_INST.rs2out
Receiver   : FORWARDING_UNIT_INST.idexrs2</title></line>
   <g transform="translate(23744,28800)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_rs2_to_forwardingunit(4:0)</text>
   </g>
   <line x1="1024" y1="31296" x2="13120" y2="31296" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="1024" y1="31296" x2="1024" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="1024" y1="30336" x2="1408" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="13120" y1="30848" x2="13120" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="13120" y1="30464" x2="12736" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="13120" y1="31296" x2="13120" y2="30848" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <line x1="21760" y1="30848" x2="13120" y2="30848" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></line>
   <circle cx="13120" cy="30848" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : idex_rd_to_exmem
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; idex_rd_to_exmem
Driver     : IDEX_INST.rdout
Receiver   : HAZARD_UNIT_INST.idexrd
Receiver   : EXMEM_INST.rdin</title></circle>
   <g transform="translate(7072,31296)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_rd_to_exmem(4:0)</text>
   </g>
   <line x1="13952" y1="29888" x2="14336" y2="29888" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_instruction_to_alucontrol
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END
HDL object : net -&gt; idex_instruction_to_alucontrol
Driver     : IDEX_INST.instructionout
Receiver   : ALU_CONTROL_INST.instruction</title></line>
   <line x1="13952" y1="29888" x2="13952" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_instruction_to_alucontrol
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END
HDL object : net -&gt; idex_instruction_to_alucontrol
Driver     : IDEX_INST.instructionout
Receiver   : ALU_CONTROL_INST.instruction</title></line>
   <line x1="13952" y1="28672" x2="12736" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_instruction_to_alucontrol
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END
HDL object : net -&gt; idex_instruction_to_alucontrol
Driver     : IDEX_INST.instructionout
Receiver   : ALU_CONTROL_INST.instruction</title></line>
   <line x1="14336" y1="29888" x2="14336" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_instruction_to_alucontrol
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END
HDL object : net -&gt; idex_instruction_to_alucontrol
Driver     : IDEX_INST.instructionout
Receiver   : ALU_CONTROL_INST.instruction</title></line>
   <line x1="14336" y1="29952" x2="14592" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_instruction_to_alucontrol
Type       : std_logic_vector(31 downto 0)
Comment    : --------------------------------------------------------------------------END
HDL object : net -&gt; idex_instruction_to_alucontrol
Driver     : IDEX_INST.instructionout
Receiver   : ALU_CONTROL_INST.instruction</title></line>
   <g transform="translate(13952,29280)">
   <g transform="rotate(90)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_instruction_to_alucontrol(31:0)</text>
   </g>
   </g>
   <line x1="12736" y1="30080" x2="14592" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_aluop_to_alucontrol
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; idex_aluop_to_alucontrol
Driver     : IDEX_INST.ALUOp
Receiver   : ALU_CONTROL_INST.aluop</title></line>
   <g transform="translate(13664,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_aluop_to_alucontrol(1:0)</text>
   </g>
   <line x1="16896" y1="29952" x2="17920" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alucontrol_aluop_to_alu
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; alucontrol_aluop_to_alu
Driver     : ALU_CONTROL_INST.aluoperation
Receiver   : ALU_INST.operation</title></line>
   <g transform="translate(17408,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">alucontrol_aluop_to_alu(4:0)</text>
   </g>
   <line x1="17216" y1="29376" x2="13888" y2="29376" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_pcout_to_alu
Type       : std_logic_vector(15 downto 0)
Comment    : --TO ALU
HDL object : net -&gt; idex_pcout_to_alu
Driver     : IDEX_INST.pcout
Receiver   : ALU_INST.pc</title></line>
   <line x1="17216" y1="29376" x2="17216" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_pcout_to_alu
Type       : std_logic_vector(15 downto 0)
Comment    : --TO ALU
HDL object : net -&gt; idex_pcout_to_alu
Driver     : IDEX_INST.pcout
Receiver   : ALU_INST.pc</title></line>
   <line x1="17216" y1="29824" x2="17920" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_pcout_to_alu
Type       : std_logic_vector(15 downto 0)
Comment    : --TO ALU
HDL object : net -&gt; idex_pcout_to_alu
Driver     : IDEX_INST.pcout
Receiver   : ALU_INST.pc</title></line>
   <line x1="13888" y1="29376" x2="13888" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_pcout_to_alu
Type       : std_logic_vector(15 downto 0)
Comment    : --TO ALU
HDL object : net -&gt; idex_pcout_to_alu
Driver     : IDEX_INST.pcout
Receiver   : ALU_INST.pc</title></line>
   <line x1="13888" y1="28928" x2="12736" y2="28928" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_pcout_to_alu
Type       : std_logic_vector(15 downto 0)
Comment    : --TO ALU
HDL object : net -&gt; idex_pcout_to_alu
Driver     : IDEX_INST.pcout
Receiver   : ALU_INST.pc</title></line>
   <g transform="translate(15552,29376)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_pcout_to_alu(15:0)</text>
   </g>
   <line x1="13056" y1="29056" x2="13056" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingmuxa
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXA
HDL object : net -&gt; idex_rs1_to_forwardingmuxa
Driver     : IDEX_INST.readdata1out
Receiver   : FORWARDING_MUX_A_INST.rs1</title></line>
   <line x1="13056" y1="29056" x2="12736" y2="29056" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingmuxa
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXA
HDL object : net -&gt; idex_rs1_to_forwardingmuxa
Driver     : IDEX_INST.readdata1out
Receiver   : FORWARDING_MUX_A_INST.rs1</title></line>
   <line x1="13056" y1="26240" x2="26048" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs1_to_forwardingmuxa
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXA
HDL object : net -&gt; idex_rs1_to_forwardingmuxa
Driver     : IDEX_INST.readdata1out
Receiver   : FORWARDING_MUX_A_INST.rs1</title></line>
   <g transform="translate(19552,26240)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_rs1_to_forwardingmuxa(31:0)</text>
   </g>
   <line x1="38144" y1="27648" x2="25536" y2="27648" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Amuxcntrl_to_forrwardingmuxA
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Amuxcntrl_to_forrwardingmuxA
Driver     : FORWARDING_UNIT_INST.forwardAmuxcntrl
Receiver   : FORWARDING_MUX_A_INST.forwardAmuxcntrl</title></line>
   <line x1="38144" y1="27648" x2="38144" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Amuxcntrl_to_forrwardingmuxA
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Amuxcntrl_to_forrwardingmuxA
Driver     : FORWARDING_UNIT_INST.forwardAmuxcntrl
Receiver   : FORWARDING_MUX_A_INST.forwardAmuxcntrl</title></line>
   <line x1="38144" y1="29952" x2="37824" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Amuxcntrl_to_forrwardingmuxA
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Amuxcntrl_to_forrwardingmuxA
Driver     : FORWARDING_UNIT_INST.forwardAmuxcntrl
Receiver   : FORWARDING_MUX_A_INST.forwardAmuxcntrl</title></line>
   <line x1="25536" y1="27648" x2="25536" y2="26624" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Amuxcntrl_to_forrwardingmuxA
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Amuxcntrl_to_forrwardingmuxA
Driver     : FORWARDING_UNIT_INST.forwardAmuxcntrl
Receiver   : FORWARDING_MUX_A_INST.forwardAmuxcntrl</title></line>
   <line x1="25536" y1="26624" x2="26048" y2="26624" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Amuxcntrl_to_forrwardingmuxA
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Amuxcntrl_to_forrwardingmuxA
Driver     : FORWARDING_UNIT_INST.forwardAmuxcntrl
Receiver   : FORWARDING_MUX_A_INST.forwardAmuxcntrl</title></line>
   <g transform="translate(31840,27648)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">forwardingunit_Amuxcntrl_to_forrwardingmuxA(1:0)</text>
   </g>
   <line x1="17472" y1="28736" x2="29440" y2="28736" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxA_rs1_to_ALU
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; forwardingmuxA_rs1_to_ALU
Driver     : FORWARDING_MUX_A_INST.MuxOutput
Receiver   : ALU_INST.input_0</title></line>
   <line x1="17472" y1="28736" x2="17472" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxA_rs1_to_ALU
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; forwardingmuxA_rs1_to_ALU
Driver     : FORWARDING_MUX_A_INST.MuxOutput
Receiver   : ALU_INST.input_0</title></line>
   <line x1="17472" y1="29568" x2="17920" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxA_rs1_to_ALU
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; forwardingmuxA_rs1_to_ALU
Driver     : FORWARDING_MUX_A_INST.MuxOutput
Receiver   : ALU_INST.input_0</title></line>
   <line x1="29440" y1="28736" x2="29440" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxA_rs1_to_ALU
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; forwardingmuxA_rs1_to_ALU
Driver     : FORWARDING_MUX_A_INST.MuxOutput
Receiver   : ALU_INST.input_0</title></line>
   <line x1="29440" y1="26240" x2="29120" y2="26240" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxA_rs1_to_ALU
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; forwardingmuxA_rs1_to_ALU
Driver     : FORWARDING_MUX_A_INST.MuxOutput
Receiver   : ALU_INST.input_0</title></line>
   <g transform="translate(23456,28736)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">forwardingmuxA_rs1_to_ALU(31:0)</text>
   </g>
   <line x1="17600" y1="28672" x2="38208" y2="28672" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXB
HDL object : net -&gt; idex_rs2_to_forwardingmuxb
Driver     : IDEX_INST.readdata2out
Receiver   : FORWARDING_MUX_B_INST.rs2</title></line>
   <line x1="17600" y1="28672" x2="17600" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXB
HDL object : net -&gt; idex_rs2_to_forwardingmuxb
Driver     : IDEX_INST.readdata2out
Receiver   : FORWARDING_MUX_B_INST.rs2</title></line>
   <line x1="17600" y1="29184" x2="12736" y2="29184" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXB
HDL object : net -&gt; idex_rs2_to_forwardingmuxb
Driver     : IDEX_INST.readdata2out
Receiver   : FORWARDING_MUX_B_INST.rs2</title></line>
   <line x1="38208" y1="28672" x2="38208" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXB
HDL object : net -&gt; idex_rs2_to_forwardingmuxb
Driver     : IDEX_INST.readdata2out
Receiver   : FORWARDING_MUX_B_INST.rs2</title></line>
   <line x1="38208" y1="29696" x2="38720" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_rs2_to_forwardingmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : TO FORWARDINGMUXB
HDL object : net -&gt; idex_rs2_to_forwardingmuxb
Driver     : IDEX_INST.readdata2out
Receiver   : FORWARDING_MUX_B_INST.rs2</title></line>
   <g transform="translate(27904,28672)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_rs2_to_forwardingmuxb(31:0)</text>
   </g>
   <line x1="38720" y1="30080" x2="37824" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingunit_Bmuxcntrl_to_forrwardingmuxB
Type       : std_logic_vector(1 downto 0)
HDL object : net -&gt; forwardingunit_Bmuxcntrl_to_forrwardingmuxB
Driver     : FORWARDING_UNIT_INST.forwardBmuxcntrl
Receiver   : FORWARDING_MUX_B_INST.forwardBmuxcntrl</title></line>
   <g transform="translate(38272,30080)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">forwardingunit_Bmuxcntrl_to_forrwardingmuxB(1:0)</text>
   </g>
   <line x1="42176" y1="29696" x2="41792" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <line x1="42816" y1="29696" x2="42176" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <line x1="42176" y1="28608" x2="42176" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <line x1="42176" y1="28608" x2="21440" y2="28608" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <line x1="21440" y1="28608" x2="21440" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <line x1="21440" y1="29952" x2="21760" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></line>
   <circle cx="42176" cy="29696" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : forwardingmuxb_rs2_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
Comment    : --      signal forwardingmuxB_rs2_to_alusrcmuxB : std_logic_vector(31 downto 0);
HDL object : net -&gt; forwardingmuxb_rs2_to_alusrcmuxb
Driver     : FORWARDING_MUX_B_INST.MuxOutput
Receiver   : ALU_SRC_MUX_B_INST.ReadRegister2
Receiver   : EXMEM_INST.readdata2in</title></circle>
   <g transform="translate(31808,28608)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">forwardingmuxb_rs2_to_alusrcmuxb(31:0)</text>
   </g>
   <line x1="13888" y1="28544" x2="42240" y2="28544" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_immediate_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; idex_immediate_to_alusrcmuxb
Driver     : IDEX_INST.immediateout
Receiver   : ALU_SRC_MUX_B_INST.ReadImmediate</title></line>
   <line x1="13888" y1="28544" x2="13888" y2="28800" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_immediate_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; idex_immediate_to_alusrcmuxb
Driver     : IDEX_INST.immediateout
Receiver   : ALU_SRC_MUX_B_INST.ReadImmediate</title></line>
   <line x1="13888" y1="28800" x2="12736" y2="28800" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_immediate_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; idex_immediate_to_alusrcmuxb
Driver     : IDEX_INST.immediateout
Receiver   : ALU_SRC_MUX_B_INST.ReadImmediate</title></line>
   <line x1="42240" y1="28544" x2="42240" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_immediate_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; idex_immediate_to_alusrcmuxb
Driver     : IDEX_INST.immediateout
Receiver   : ALU_SRC_MUX_B_INST.ReadImmediate</title></line>
   <line x1="42240" y1="29824" x2="42816" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : idex_immediate_to_alusrcmuxb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; idex_immediate_to_alusrcmuxb
Driver     : IDEX_INST.immediateout
Receiver   : ALU_SRC_MUX_B_INST.ReadImmediate</title></line>
   <g transform="translate(28064,28544)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">idex_immediate_to_alusrcmuxb(31:0)</text>
   </g>
   <line x1="45696" y1="28480" x2="17408" y2="28480" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <line x1="45696" y1="28480" x2="45696" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <line x1="45696" y1="29696" x2="45376" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <line x1="17408" y1="28480" x2="17408" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <line x1="17408" y1="29696" x2="17920" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <line x1="46976" y1="29696" x2="45696" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></line>
   <circle cx="45696" cy="29696" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : alusrcmuxB_rs2_to_alu
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxB_rs2_to_alu
Driver     : ALU_SRC_MUX_B_INST.MuxOutput
Receiver   : ALU_INST.input_1
Receiver   : concurrent0.alusrcmuxB_rs2_to_alu</title></circle>
   <g transform="translate(31552,28480)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">alusrcmuxB_rs2_to_alu(31:0)</text>
   </g>
   <line x1="20096" y1="29696" x2="21760" y2="29696" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : alu_zeroresult_to_exmem
Type       : std_logic
HDL object : net -&gt; alu_zeroresult_to_exmem
Driver     : ALU_INST.zero_flag
Receiver   : EXMEM_INST.aluzeroin</title></line>
   <g transform="translate(20928,29696)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">alu_zeroresult_to_exmem</text>
   </g>
   <line x1="20736" y1="29824" x2="20736" y2="30720" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : alu_JALorBRANCH_to_exmem
Type       : std_logic
HDL object : net -&gt; alu_JALorBRANCH_to_exmem
Driver     : ALU_INST.JALorBRANCH
Receiver   : EXMEM_INST.JALorBRANCH</title></line>
   <line x1="20736" y1="29824" x2="20096" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : alu_JALorBRANCH_to_exmem
Type       : std_logic
HDL object : net -&gt; alu_JALorBRANCH_to_exmem
Driver     : ALU_INST.JALorBRANCH
Receiver   : EXMEM_INST.JALorBRANCH</title></line>
   <line x1="20736" y1="30720" x2="21760" y2="30720" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : alu_JALorBRANCH_to_exmem
Type       : std_logic
HDL object : net -&gt; alu_JALorBRANCH_to_exmem
Driver     : ALU_INST.JALorBRANCH
Receiver   : EXMEM_INST.JALorBRANCH</title></line>
   <g transform="translate(21248,30720)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">alu_JALorBRANCH_to_exmem</text>
   </g>
   <line x1="20800" y1="29568" x2="20800" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alu_result_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alu_result_to_exmem
Driver     : ALU_INST.ALU_output
Receiver   : EXMEM_INST.aluresultin</title></line>
   <line x1="20800" y1="29568" x2="20096" y2="29568" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alu_result_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alu_result_to_exmem
Driver     : ALU_INST.ALU_output
Receiver   : EXMEM_INST.aluresultin</title></line>
   <line x1="20800" y1="29824" x2="21760" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alu_result_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alu_result_to_exmem
Driver     : ALU_INST.ALU_output
Receiver   : EXMEM_INST.aluresultin</title></line>
   <g transform="translate(21280,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">alu_result_to_exmem(31:0)</text>
   </g>
   <line x1="47424" y1="29824" x2="47552" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : alusrcmuxb_source2_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxb_source2_to_exmem
Driver     : concurrent0.alusrcmuxb_source2_to_exmem</title></line>
   <line x1="47536" y1="29808" x2="47568" y2="29840" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : alusrcmuxb_source2_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxb_source2_to_exmem
Driver     : concurrent0.alusrcmuxb_source2_to_exmem</title></line>
   <line x1="47536" y1="29840" x2="47568" y2="29808" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : alusrcmuxb_source2_to_exmem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; alusrcmuxb_source2_to_exmem
Driver     : concurrent0.alusrcmuxb_source2_to_exmem</title></line>
   <g transform="translate(47488,29824)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="start" dominant-baseline="ideographic">alusrcmuxb_source2_to_exmem(31:0)</text>
   </g>
   <line x1="30080" y1="29184" x2="37888" y2="29184" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_zero_to_branchand
Type       : std_logic
HDL object : net -&gt; exmem_zero_to_branchand
Driver     : EXMEM_INST.aluzeroout
Receiver   : BRANCH_AND_INST.ALUZero</title></line>
   <line x1="30080" y1="29184" x2="30080" y2="29440" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_zero_to_branchand
Type       : std_logic
HDL object : net -&gt; exmem_zero_to_branchand
Driver     : EXMEM_INST.aluzeroout
Receiver   : BRANCH_AND_INST.ALUZero</title></line>
   <line x1="30080" y1="29440" x2="24192" y2="29440" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_zero_to_branchand
Type       : std_logic
HDL object : net -&gt; exmem_zero_to_branchand
Driver     : EXMEM_INST.aluzeroout
Receiver   : BRANCH_AND_INST.ALUZero</title></line>
   <line x1="37888" y1="29184" x2="37888" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_zero_to_branchand
Type       : std_logic
HDL object : net -&gt; exmem_zero_to_branchand
Driver     : EXMEM_INST.aluzeroout
Receiver   : BRANCH_AND_INST.ALUZero</title></line>
   <line x1="37888" y1="26240" x2="42816" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_zero_to_branchand
Type       : std_logic
HDL object : net -&gt; exmem_zero_to_branchand
Driver     : EXMEM_INST.aluzeroout
Receiver   : BRANCH_AND_INST.ALUZero</title></line>
   <g transform="translate(33984,29184)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_zero_to_branchand</text>
   </g>
   <line x1="24256" y1="29696" x2="24256" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_src2_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_src2_to_datamem
Driver     : EXMEM_INST.readdata2out
Receiver   : DATA_MEMORY_INST.writedata</title></line>
   <line x1="24256" y1="29696" x2="24192" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_src2_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_src2_to_datamem
Driver     : EXMEM_INST.readdata2out
Receiver   : DATA_MEMORY_INST.writedata</title></line>
   <line x1="24256" y1="30592" x2="26048" y2="30592" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_src2_to_datamem
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; exmem_src2_to_datamem
Driver     : EXMEM_INST.readdata2out
Receiver   : DATA_MEMORY_INST.writedata</title></line>
   <g transform="translate(25152,30592)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_src2_to_datamem(31:0)</text>
   </g>
   <line x1="28800" y1="29376" x2="25664" y2="29376" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memtoreg_to_memwb
Type       : std_logic
Comment    : --
HDL object : net -&gt; exmem_memtoreg_to_memwb
Driver     : EXMEM_INST.MemtoRegout
Receiver   : MEMWB_INST.MemtoRegin</title></line>
   <line x1="28800" y1="29376" x2="28800" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memtoreg_to_memwb
Type       : std_logic
Comment    : --
HDL object : net -&gt; exmem_memtoreg_to_memwb
Driver     : EXMEM_INST.MemtoRegout
Receiver   : MEMWB_INST.MemtoRegin</title></line>
   <line x1="28800" y1="30208" x2="30400" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memtoreg_to_memwb
Type       : std_logic
Comment    : --
HDL object : net -&gt; exmem_memtoreg_to_memwb
Driver     : EXMEM_INST.MemtoRegout
Receiver   : MEMWB_INST.MemtoRegin</title></line>
   <line x1="25664" y1="29376" x2="25664" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memtoreg_to_memwb
Type       : std_logic
Comment    : --
HDL object : net -&gt; exmem_memtoreg_to_memwb
Driver     : EXMEM_INST.MemtoRegout
Receiver   : MEMWB_INST.MemtoRegin</title></line>
   <line x1="25664" y1="29824" x2="24192" y2="29824" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memtoreg_to_memwb
Type       : std_logic
Comment    : --
HDL object : net -&gt; exmem_memtoreg_to_memwb
Driver     : EXMEM_INST.MemtoRegout
Receiver   : MEMWB_INST.MemtoRegin</title></line>
   <g transform="translate(27232,29376)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_memtoreg_to_memwb</text>
   </g>
   <line x1="30016" y1="29120" x2="25600" y2="29120" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="33536" y1="29120" x2="33536" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="33536" y1="29952" x2="35008" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="25600" y1="29120" x2="25600" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="25600" y1="29952" x2="24192" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="33536" y1="29120" x2="30016" y2="29120" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="30016" y1="30336" x2="30016" y2="29120" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <line x1="30016" y1="30336" x2="30400" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></line>
   <circle cx="30016" cy="29120" r="16"
 fill="rgb(0,0,255)" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_regwrite_to_memwb
Type       : std_logic
HDL object : net -&gt; exmem_regwrite_to_memwb
Driver     : EXMEM_INST.RegWriteout
Receiver   : FORWARDING_UNIT_INST.exmemregwritecntrl
Receiver   : MEMWB_INST.RegWritein</title></circle>
   <g transform="translate(27808,29120)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_regwrite_to_memwb</text>
   </g>
   <line x1="24320" y1="30080" x2="24320" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memread_to_datamem
Type       : std_logic
Comment    : --  
HDL object : net -&gt; exmem_memread_to_datamem
Driver     : EXMEM_INST.MemRead
Receiver   : DATA_MEMORY_INST.memread</title></line>
   <line x1="24320" y1="30080" x2="24192" y2="30080" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memread_to_datamem
Type       : std_logic
Comment    : --  
HDL object : net -&gt; exmem_memread_to_datamem
Driver     : EXMEM_INST.MemRead
Receiver   : DATA_MEMORY_INST.memread</title></line>
   <line x1="24320" y1="30336" x2="26048" y2="30336" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memread_to_datamem
Type       : std_logic
Comment    : --  
HDL object : net -&gt; exmem_memread_to_datamem
Driver     : EXMEM_INST.MemRead
Receiver   : DATA_MEMORY_INST.memread</title></line>
   <g transform="translate(25184,30336)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_memread_to_datamem</text>
   </g>
   <line x1="24192" y1="30208" x2="26048" y2="30208" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : exmem_memwrite_to_datamem
Type       : std_logic
HDL object : net -&gt; exmem_memwrite_to_datamem
Driver     : EXMEM_INST.MemWrite
Receiver   : DATA_MEMORY_INST.memwrite</title></line>
   <g transform="translate(25120,30208)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_memwrite_to_datamem</text>
   </g>
   <line x1="24192" y1="30336" x2="42816" y2="26368" stroke="rgb(0,0,255)" stroke-width="3" stroke-dasharray="10,3"/>
   <g transform="translate(33504,28352)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_branch_to_branchand</text>
   </g>
   <line x1="24576" y1="31360" x2="4672" y2="31360" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="24576" y1="31360" x2="24576" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="24576" y1="30464" x2="24192" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="4672" y1="31360" x2="4672" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="4672" y1="30080" x2="5056" y2="30080" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="24576" y1="31680" x2="24576" y2="31360" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="30016" y1="31680" x2="33536" y2="31680" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="33536" y1="31680" x2="33536" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="33536" y1="30208" x2="35008" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="24576" y1="31680" x2="30016" y2="31680" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="30016" y1="30464" x2="30016" y2="31680" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <line x1="30016" y1="30464" x2="30400" y2="30464" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></line>
   <circle cx="24576" cy="31360" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></circle>
   <circle cx="30016" cy="31680" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : exmem_rd_to_memwb
Type       : std_logic_vector(4 downto 0)
Comment    : --  
HDL object : net -&gt; exmem_rd_to_memwb
Driver     : EXMEM_INST.rdout
Receiver   : CONTROLUNIT_INST.exmem_rd
Receiver   : FORWARDING_UNIT_INST.exmemrd
Receiver   : MEMWB_INST.rdin</title></circle>
   <g transform="translate(14624,31360)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">exmem_rd_to_memwb(4:0)</text>
   </g>
   <line x1="28480" y1="29952" x2="30400" y2="29952" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : datamem_readdata_to_memwb
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; datamem_readdata_to_memwb
Driver     : DATA_MEMORY_INST.readdata
Receiver   : MEMWB_INST.readdata2in</title></line>
   <g transform="translate(29440,29952)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">datamem_readdata_to_memwb(31:0)</text>
   </g>
   <line x1="33600" y1="29696" x2="33600" y2="26368" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_readdata_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_readdata_to_writebackmux
Driver     : MEMWB_INST.readdata2out
Receiver   : WRITEBACK_MUX_INST.read_data</title></line>
   <line x1="33600" y1="29696" x2="33088" y2="29696" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_readdata_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_readdata_to_writebackmux
Driver     : MEMWB_INST.readdata2out
Receiver   : WRITEBACK_MUX_INST.read_data</title></line>
   <line x1="33600" y1="26368" x2="35008" y2="26368" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_readdata_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_readdata_to_writebackmux
Driver     : MEMWB_INST.readdata2out
Receiver   : WRITEBACK_MUX_INST.read_data</title></line>
   <g transform="translate(33600,28032)">
   <g transform="rotate(90)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">memwb_readdata_to_writebackmux(31:0)</text>
   </g>
   </g>
   <line x1="33664" y1="29824" x2="33664" y2="26496" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_aluresult_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_aluresult_to_writebackmux
Driver     : MEMWB_INST.aluresultout
Receiver   : WRITEBACK_MUX_INST.aluresult</title></line>
   <line x1="33664" y1="29824" x2="33088" y2="29824" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_aluresult_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_aluresult_to_writebackmux
Driver     : MEMWB_INST.aluresultout
Receiver   : WRITEBACK_MUX_INST.aluresult</title></line>
   <line x1="33664" y1="26496" x2="35008" y2="26496" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_aluresult_to_writebackmux
Type       : std_logic_vector(31 downto 0)
HDL object : net -&gt; memwb_aluresult_to_writebackmux
Driver     : MEMWB_INST.aluresultout
Receiver   : WRITEBACK_MUX_INST.aluresult</title></line>
   <g transform="translate(33664,28160)">
   <g transform="rotate(90)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">memwb_aluresult_to_writebackmux(31:0)</text>
   </g>
   </g>
   <line x1="47744" y1="31168" x2="29952" y2="31168" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_regwritecancel_to_exmem
Type       : std_logic
HDL object : net -&gt; branchand_regwritecancel_to_exmem
Driver     : concurrent0.branchand_regwritecancel_to_exmem
Receiver   : MEMWB_INST.branchregwritecancel</title></line>
   <line x1="47744" y1="31168" x2="47744" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_regwritecancel_to_exmem
Type       : std_logic
HDL object : net -&gt; branchand_regwritecancel_to_exmem
Driver     : concurrent0.branchand_regwritecancel_to_exmem
Receiver   : MEMWB_INST.branchregwritecancel</title></line>
   <line x1="47744" y1="29952" x2="47424" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_regwritecancel_to_exmem
Type       : std_logic
HDL object : net -&gt; branchand_regwritecancel_to_exmem
Driver     : concurrent0.branchand_regwritecancel_to_exmem
Receiver   : MEMWB_INST.branchregwritecancel</title></line>
   <line x1="29952" y1="31168" x2="29952" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_regwritecancel_to_exmem
Type       : std_logic
HDL object : net -&gt; branchand_regwritecancel_to_exmem
Driver     : concurrent0.branchand_regwritecancel_to_exmem
Receiver   : MEMWB_INST.branchregwritecancel</title></line>
   <line x1="29952" y1="30592" x2="30400" y2="30592" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : branchand_regwritecancel_to_exmem
Type       : std_logic
HDL object : net -&gt; branchand_regwritecancel_to_exmem
Driver     : concurrent0.branchand_regwritecancel_to_exmem
Receiver   : MEMWB_INST.branchregwritecancel</title></line>
   <g transform="translate(38848,31168)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">branchand_regwritecancel_to_exmem</text>
   </g>
   <line x1="33728" y1="29888" x2="33344" y2="29888" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_memtoreg_to_wbmux
Type       : std_logic
HDL object : net -&gt; memwb_memtoreg_to_wbmux
Driver     : MEMWB_INST.MemtoReg
Receiver   : WRITEBACK_MUX_INST.memtoregcontrol</title></line>
   <line x1="33728" y1="29888" x2="33728" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_memtoreg_to_wbmux
Type       : std_logic
HDL object : net -&gt; memwb_memtoreg_to_wbmux
Driver     : MEMWB_INST.MemtoReg
Receiver   : WRITEBACK_MUX_INST.memtoregcontrol</title></line>
   <line x1="33728" y1="26240" x2="35008" y2="26240" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_memtoreg_to_wbmux
Type       : std_logic
HDL object : net -&gt; memwb_memtoreg_to_wbmux
Driver     : MEMWB_INST.MemtoReg
Receiver   : WRITEBACK_MUX_INST.memtoregcontrol</title></line>
   <line x1="33344" y1="29888" x2="33344" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_memtoreg_to_wbmux
Type       : std_logic
HDL object : net -&gt; memwb_memtoreg_to_wbmux
Driver     : MEMWB_INST.MemtoReg
Receiver   : WRITEBACK_MUX_INST.memtoregcontrol</title></line>
   <line x1="33344" y1="29952" x2="33088" y2="29952" stroke="rgb(0,0,255)" stroke-width="3">
<title>Net        : memwb_memtoreg_to_wbmux
Type       : std_logic
HDL object : net -&gt; memwb_memtoreg_to_wbmux
Driver     : MEMWB_INST.MemtoReg
Receiver   : WRITEBACK_MUX_INST.memtoregcontrol</title></line>
   <g transform="translate(33728,28064)">
   <g transform="rotate(90)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">memwb_memtoreg_to_wbmux</text>
   </g>
   </g>
   <line x1="4736" y1="30656" x2="4736" y2="31744" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="4736" y1="30656" x2="4800" y2="30656" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="4800" y1="30656" x2="4800" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="4800" y1="30336" x2="5056" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="34688" y1="31744" x2="69504" y2="31744" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="69504" y1="31744" x2="69504" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="69504" y1="28288" x2="70784" y2="28288" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="4736" y1="31744" x2="34688" y2="31744" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="34688" y1="30656" x2="34688" y2="31744" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="34688" y1="30336" x2="35008" y2="30336" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="34688" y1="30336" x2="34688" y2="30656" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="33344" y1="30656" x2="34688" y2="30656" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="33344" y1="30656" x2="33344" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <line x1="33344" y1="30208" x2="33088" y2="30208" stroke="rgb(255,0,0)" stroke-width="9">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></line>
   <circle cx="34688" cy="31744" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></circle>
   <circle cx="34688" cy="30656" r="24"
 fill="rgb(255,0,0)" stroke="rgb(255,0,0)" stroke-width="3">
<title>Net        : memwb_rd_to_out
Type       : std_logic_vector(4 downto 0)
HDL object : net -&gt; memwb_rd_to_out
Driver     : MEMWB_INST.rdout
Receiver   : REGFILE_INST.writeregisteraddress
Receiver   : CONTROLUNIT_INST.memwb_rd
Receiver   : FORWARDING_UNIT_INST.memwbrd</title></circle>
   <g transform="translate(52096,31744)">
   <text font-family="" font-size="96" fill="rgb(0,0,255)" text-anchor="middle" dominant-baseline="ideographic">memwb_rd_to_out(4:0)</text>
   </g>
</svg>
