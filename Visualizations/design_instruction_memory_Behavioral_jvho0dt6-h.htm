<!DOCTYPE html public "-//W3C//DTD HTML 4.0 Final//EN">
<html>
<head>
<meta charset="utf-8">
<meta generator="Ease 9.5 Revision 5">
<link rel="stylesheet" type="text/css" href="easestyle.css">
<title>Architecture design.instruction_memory.Behavioral</title>
</head>
<body>
<div class="hdlw_banner"><a href="https://www.hdlworks.com">Generated by <b>Ease</b> for <i>chrisnielsen</i> on Fri Dec 13 09:05:10 2024</a></div>

<div class="hdlw_nav"><table><tr><td><a href="javascript:history.go(-1)"><img src="images/arrow_left.png">Back</a></td>
<td><a href="index.htm"><img src="images/ease.png">Index</a></td>
<td><a href="design_nus4l6t2.htm"><img src="images/library.png">design</a></td>
<td><a href="design_instruction_memory_rdm177kr.htm"><img src="images/symbol.png">instruction_memory</a></td>
</tr>
</table>
</div>
<h1>Documentation for architecture design.instruction_memory.Behavioral</h1><table class="tableContents"><tr>
<td><a href="design_instruction_memory_Behavioral_jvho0dt6.htm">Contents</a></td>
<td><a href="design_instruction_memory_Behavioral_jvho0dt6-d.htm">Side Data</a></td>
<td class="grActive"><a href="design_instruction_memory_Behavioral_jvho0dt6-h.htm">Generated HDL</a></td>
</tr></table>
<br>
<pre class="DefaultText">
<span class="DefaultMargin">    1  </span><span class="DefaultComment">--------------------------------------------------------------------------------</span>
<span class="DefaultMargin">    2  </span><span class="DefaultComment">-- Object        : Architecture design.instruction_memory.Behavioral</span>
<span class="DefaultMargin">    3  </span><span class="DefaultComment">-- Last modified : Fri Dec 13 09:00:34 2024</span>
<span class="DefaultMargin">    4  </span><span class="DefaultComment">--------------------------------------------------------------------------------</span>
<span class="DefaultMargin">    5  </span>
<span class="DefaultMargin">    6  </span><span class="DefaultGroup1">architecture</span><span class="DefaultText"> Behavioral </span><span class="DefaultGroup1">of</span><span class="DefaultText"> instruction_memory </span><span class="DefaultGroup1">is</span>
<span class="DefaultMargin">    7  </span><span class="DefaultText">    </span><span class="DefaultComment">-- Memory type definition reduced to 128 entries</span>
<span class="DefaultMargin">    8  </span><span class="DefaultText">    </span><span class="DefaultGroup1">type</span><span class="DefaultText"> memory_array </span><span class="DefaultGroup1">is</span><span class="DefaultText"> </span><span class="DefaultGroup1">array</span><span class="DefaultText"> (0 </span><span class="DefaultGroup1">to</span><span class="DefaultText"> 127) </span><span class="DefaultGroup1">of</span><span class="DefaultText"> </span><span class="DefaultGroup3">STD_LOGIC_VECTOR</span><span class="DefaultText">(31 </span><span class="DefaultGroup1">downto</span><span class="DefaultText"> 0);</span>
<span class="DefaultMargin">    9  </span><span class="DefaultText">    </span><span class="DefaultGroup1">signal</span><span class="DefaultText"> mem : memory_array := (</span><span class="DefaultGroup1">others</span><span class="DefaultText"> =&gt; x</span><span class="DefaultStrings">&quot;00000000&quot;</span><span class="DefaultText">);</span>
<span class="DefaultMargin">   10  </span><span class="DefaultText">    </span>
<span class="DefaultMargin">   11  </span><span class="DefaultText">    </span><span class="DefaultComment">-- Address bounds checking function</span>
<span class="DefaultMargin">   12  </span><span class="DefaultText">    </span><span class="DefaultGroup1">function</span><span class="DefaultText"> is_valid_address(addr: </span><span class="DefaultGroup3">std_logic_vector</span><span class="DefaultText">) </span><span class="DefaultGroup1">return</span><span class="DefaultText"> </span><span class="DefaultGroup2">boolean</span><span class="DefaultText"> </span><span class="DefaultGroup1">is</span>
<span class="DefaultMargin">   13  </span><span class="DefaultText">    </span><span class="DefaultGroup1">begin</span>
<span class="DefaultMargin">   14  </span><span class="DefaultText">        </span><span class="DefaultGroup1">return</span><span class="DefaultText"> </span><span class="DefaultGroup3">unsigned</span><span class="DefaultText">(addr(15 </span><span class="DefaultGroup1">downto</span><span class="DefaultText"> 7)) = 0;  </span><span class="DefaultComment">-- Check if upper bits are 0</span>
<span class="DefaultMargin">   15  </span><span class="DefaultText">    </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">function</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   16  </span>
<span class="DefaultMargin">   17  </span><span class="DefaultGroup1">begin</span>
<span class="DefaultMargin">   18  </span><span class="DefaultText">    </span><span class="DefaultComment">-- Instruction fetch process with bounds checking</span>
<span class="DefaultMargin">   19  </span><span class="DefaultText">    </span><span class="DefaultGroup1">process</span><span class="DefaultText">(pc_address)</span>
<span class="DefaultMargin">   20  </span><span class="DefaultText">        </span><span class="DefaultGroup1">variable</span><span class="DefaultText"> address_offset : </span><span class="DefaultGroup2">integer</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   21  </span><span class="DefaultText">    </span><span class="DefaultGroup1">begin</span>
<span class="DefaultMargin">   22  </span><span class="DefaultText">        </span><span class="DefaultGroup1">if</span><span class="DefaultText"> is_valid_address(pc_address) </span><span class="DefaultGroup1">then</span>
<span class="DefaultMargin">   23  </span><span class="DefaultText">            address_offset := to_integer(</span><span class="DefaultGroup3">unsigned</span><span class="DefaultText">(pc_address(8 </span><span class="DefaultGroup1">downto</span><span class="DefaultText"> 2))); </span><span class="DefaultComment">-- Divide by 4 using bits</span>
<span class="DefaultMargin">   24  </span><span class="DefaultText">            instruction &lt;= mem(address_offset);</span>
<span class="DefaultMargin">   25  </span><span class="DefaultText">        </span><span class="DefaultGroup1">else</span>
<span class="DefaultMargin">   26  </span><span class="DefaultText">            instruction &lt;= x</span><span class="DefaultStrings">&quot;00000000&quot;</span><span class="DefaultText">;  </span><span class="DefaultComment">-- Return NOP if address out of bounds</span>
<span class="DefaultMargin">   27  </span><span class="DefaultText">        </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">if</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   28  </span><span class="DefaultText">    </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">process</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   29  </span><span class="DefaultText">     </span><span class="DefaultComment">-- Debug Memory Access Process</span>
<span class="DefaultMargin">   30  </span><span class="DefaultGroup1">process</span><span class="DefaultText">(debug_clk, reset, debug_we)</span>
<span class="DefaultMargin">   31  </span><span class="DefaultGroup1">begin</span>
<span class="DefaultMargin">   32  </span><span class="DefaultText">    </span><span class="DefaultGroup1">if</span><span class="DefaultText"> reset = </span><span class="DefaultStrings">'0'</span><span class="DefaultText"> </span><span class="DefaultGroup1">then</span>
<span class="DefaultMargin">   33  </span><span class="DefaultText">        mem &lt;= (</span><span class="DefaultGroup1">others</span><span class="DefaultText"> =&gt; x</span><span class="DefaultStrings">&quot;00000000&quot;</span><span class="DefaultText">);</span>
<span class="DefaultMargin">   34  </span><span class="DefaultText">        debug_data &lt;= (</span><span class="DefaultGroup1">others</span><span class="DefaultText"> =&gt; </span><span class="DefaultStrings">'Z'</span><span class="DefaultText">);</span>
<span class="DefaultMargin">   35  </span><span class="DefaultText">    </span><span class="DefaultGroup1">elsif</span><span class="DefaultText"> debug_we = </span><span class="DefaultStrings">'1'</span><span class="DefaultText"> </span><span class="DefaultGroup1">then</span>
<span class="DefaultMargin">   36  </span><span class="DefaultText">        </span><span class="DefaultGroup1">if</span><span class="DefaultText"> </span><span class="DefaultGroup3">rising_edge</span><span class="DefaultText">(debug_clk) </span><span class="DefaultGroup1">then</span>
<span class="DefaultMargin">   37  </span><span class="DefaultText">            mem(to_integer(</span><span class="DefaultGroup3">unsigned</span><span class="DefaultText">(debug_addr))) &lt;= debug_data;</span>
<span class="DefaultMargin">   38  </span><span class="DefaultText">        </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">if</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   39  </span><span class="DefaultText">        debug_data &lt;= (</span><span class="DefaultGroup1">others</span><span class="DefaultText"> =&gt; </span><span class="DefaultStrings">'Z'</span><span class="DefaultText">);  </span><span class="DefaultComment">-- Always Z during write</span>
<span class="DefaultMargin">   40  </span><span class="DefaultText">    </span><span class="DefaultGroup1">elsif</span><span class="DefaultText"> </span><span class="DefaultGroup3">rising_edge</span><span class="DefaultText">(debug_clk) </span><span class="DefaultGroup1">then</span>
<span class="DefaultMargin">   41  </span><span class="DefaultText">        </span><span class="DefaultComment">--debug_data &lt;= mem(to_integer(unsigned(debug_addr)));  -- Read operation</span>
<span class="DefaultMargin">   42  </span><span class="DefaultText">    </span><span class="DefaultGroup1">else</span>
<span class="DefaultMargin">   43  </span><span class="DefaultText">        </span><span class="DefaultComment">--debug_data &lt;= (others =&gt; 'Z');  -- Default state</span>
<span class="DefaultMargin">   44  </span><span class="DefaultText">    </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">if</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   45  </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">process</span><span class="DefaultText">;</span>
<span class="DefaultMargin">   46  </span>
<span class="DefaultMargin">   47  </span><span class="DefaultGroup1">end</span><span class="DefaultText"> </span><span class="DefaultGroup1">architecture</span><span class="DefaultText"> Behavioral ; </span><span class="DefaultComment">-- of instruction_memory</span>
<span class="DefaultMargin">   48  </span>
</pre>
</body>
</html>
