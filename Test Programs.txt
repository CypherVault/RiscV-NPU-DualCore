 	
------------------------------------------------------------------------------confirmed and works

	1 => x"02A00093",
        2 => x"00102623",
        3 => x"00C02103",
        4 => x"00A10193",                            --load and add test program

	Final state:
	- Memory address 12 contains 42
	- Register x1 contains 42
	- Register x2 contains 42
	- Register x3 contains 52

------------------------------------------------------------------------------confirmed and works

	1 => x"00A00093",
        2 => x"01400113",
        3 => x"002081B3",
        4 => x"40110233",
	5 => x"022082B3",  -- R-Type Arithmetic Operations

Final Register States:
	•	x0: 0
	•	x1: 10
	•	x2: 20
	•	x3: 30 (result of add)
	•	x4: 10 (result of sub)
	•	x5: 200 (result of mul)

Memory State: Unchanged

------------------------------------------------------------------------------confirmed and works

 1 => x"00f00093",
        2 => x"00209113",
        3 => x"00115193",
        4 => x"4011d213",
	5 => x"00f0f293",  -- I-Type Arithmetic and Logical
        6 => x"0100e313",
	7 => x"00f0c393",

Final Register States:
	•	x1: 1511:27 PM 11/20/202411:27 PM 11/20/2024
	•	x2: 60 (result of slli)
	•	x3: 30 (result of srli)
	•	x4: 15 (result of srai)
	•	x5: 15 (result of andi)
	•	x6: 31 (result of ori)
	•	x7: 0 (result of xori)
Memory State: Unchanged

------------------------------------------------------------------------------confirmed and works

 0 => x"00000000",
        1 => x"02a00093",
        2 => x"00102823",
        3 => x"01002103",
        4 => x"01000183",                            --## Memory and Control Flow Test Suite - Load/Store Instructions
	5 => x"01001203",

	Final Register States:
	x1: 42
	x2: 42 (loaded from memory)
	x3: 42 (byte load)
	x4: 42 (halfword load)
	Memory State:
	Address 16: Contains 42

------------------------------------------------------------------------------confirmed and works

 	1 => x"00a00093",
        2 => x"00108133",		   -- ## Data Hazards
        3 => x"021101b3", 

	Final Register States:
	x1: 10
	x2: 20
	x3: 200


------------------------------------------------------------------------------

experimental :


------------------------------------------------------------------------------
Branch and Jump Instructions

            1 => x"00A00093",  -- addi x1, x0, 10
	    2 => x"01400113",  -- addi x2, x0, 20
	    3 => x"00208663",  -- beq x1, x2, label (won't branch)
	    4 => x"00209063",  -- bne x1, x2, label
	    5 => x"01E00193",  -- addi x3, x0, 30
	    6 => x"0080026f",  -- jal x4, target       LABEL
	    7 => x"02800293",  -- addi x5, x0, 40
	    8 => x"03200313",  -- addi x6, x0, 50      TARGET
				

Final Register States:
x1 = 10
x2 = 20
x3 = 0 (empty cause branch) 
x4 = target for return instruction address (28 because it was 24+4)
x5 = 0 (empty cause jump and link)
x6 = 50

First Test
Cycle 1: Load x1 with 10
Cycle 2: Load x2 with 20
Cycle 3: Attempt beq (not taken), proceed to next instruction
Cycle 4: bne instruction taken, skip to jal
Cycle 5: Jump to target, load x6 with 50

---------------------------------------- this actually works!

Control Hazards

     1 => x"00A00093",  -- addi x1, x0, 10
    2 => x"01400113",  -- addi x2, x0, 20
    3 => x"0020c463",  -- blt x1, x2, label
    4 => x"01E00193",  -- addi x3, x0, 30
    5 => x"02800213",  -- addi x4, x0, 40


Final Register States:
x1 = 10
x2 = 20
x3 = empty (not modified due to branch)
x4 = 40

Second Test
Cycle 1: Load x1 with 10
Cycle 2: Load x2 with 20
Cycle 3: blt taken (x1 < x2), skip addi x3
Cycle 4: Load x4 with 40





CELCIUS FARHENHEIT Conversion


0 => x"00000000",  -- Unused position 0
1 => x"00A00093",  -- addi x1, x0, 10    (load first temp 0°C)
2 => x"01400113",  -- addi x2, x0, 20    (load second temp 20°C)
3 => x"02500193",  -- addi x3, x0, 37    (load third temp 37°C)
4 => x"06400213",  -- addi x4, x0, 100   (load fourth temp 100°C)
5 => x"02000393",  -- addi x7, x0, 32    (base address for storage)

-- First temperature (x1)
6 => x"00309293",  -- slli x5, x1, 3     (multiply by 8)
7 => x"0012d313",  -- srli x6, x5, 1     (divide by 2)
8 => x"02030313",  -- addi x6, x6, 32    (add 32)
9 => x"0063a023",  -- sw x6, 0(x7)       (store at base)

-- Second temperature (x2)
10 => x"00311293", -- slli x5, x2, 3     (multiply by 8)
11 => x"0012d313", -- srli x6, x5, 1     (divide by 2)
12 => x"02030313", -- addi x6, x6, 32    (add 32)
13 => x"0063a223", -- sw x6, 4(x7)       (store at base + 4)

-- Third temperature (x3)
14 => x"00319293", -- slli x5, x3, 3     (multiply by 8)
15 => x"0012d313", -- srli x6, x5, 1     (divide by 2)
16 => x"02030313", -- addi x6, x6, 32    (add 32)
17 => x"0063a423", -- sw x6, 8(x7)       (store at base + 8)

-- Fourth temperature (x4)
18 => x"00321293", -- slli x5, x4, 3     (multiply by 8)
19 => x"0012d313", -- srli x6, x5, 1     (divide by 2)
20 => x"02030313", -- addi x6, x6, 32    (add 32)
21 => x"0063a623", -- sw x6, 12(x7)      (store at base + 12)

22 => x"00000067"  -- ret                (return)

The final memory should contain:
Memory = 72°F
Memory = 112°F
Memory = 180°F
Memory = 432°F


-- Memory initialization for RISC-V Modulo Program (47/5)
0 => x"00000000",  -- Unused position 0
1 => x"02f00513",  -- addi x10, x0, 47    # Load dividend into x10
2 => x"00500593",  -- addi x11, x0, 5     # Load divisor into x11
3 => x"00000613",  -- addi x12, x0, 0     # Initialize quotient in x12
-- Reordered sequence
4 => x"00050693",  -- addi x13, x10, 0    # Copy dividend to x13
5 => x"40b686b3",  -- sub x13, x13, x11   # Subtract first
6 => x"02b6c063",  -- blt x13, x11, 32    # Then compare
7 => x"00160613",  -- addi x12, x12, 1    # Increment quotient
8 => x"ff5ff06f",  -- jal x0, -12        # Jump back from 32 to 16

so the last incremenbted 9 is not bein saved, and the weired negative number s being sent on the last clk cycle 1000ns to jump to this point after clk.

the fix would be a NOP for this specific program 

instr_mem[0] = 32'h00000000;  // Unused position 0
instr_mem[1] = 32'h02f00513;  // addi x10, x0, 47    # Load dividend into x10
instr_mem[2] = 32'h00500593;  // addi x11, x0, 5     # Load divisor into x11
instr_mem[3] = 32'h00000613;  // addi x12, x0, 0     # Initialize quotient in x12
instr_mem[4] = 32'h00050693;  // addi x13, x10, 0    # Copy dividend to x13
instr_mem[5] = 32'h40b686b3;  // sub x13, x13, x11   # Subtract first
instr_mem[6] = 32'h02b6c063;  // blt x13, x11, 32    # Then compare
instr_mem[7] = 32'h00160613;  // addi x12, x12, 1    # Increment quotient
instr_mem[8] = 32'h00000013;  // addi x0, x0, 0      # NOP instruction
instr_mem[9] = 32'hff1ff06f;  // jal x0, -16         # Jump back (adjusted offset) THIS OFFSET IS WRONG NEED TO FIX THIS INSTRUCTION test in aldec 

C code first program: 10+5=15
0  => x"00000000",  -- NOP or unused
1  => x"ff010113",  -- addi x2, x2, -16
2  => x"00500793",  -- addi x15, zero, 5
3  => x"00f12623",  -- sw x15, 12(x2)
4  => x"00a00793",  -- addi x15, x0, 10
5  => x"00f12423",  -- sw x15, 8(x2)
6  => x"00c12703",  -- lw x14, 12(x2)
7  => x"00812783",  -- lw x15, 8(x2) AT HERE (processor thinks that the ADDRESS of the load into regsiter is the ADDRESS that is calcualted from that clock cycle. THEREFORE the processor needs to know that IOSNT the most updated version of tbat register 
8  => x"00f707b3",  -- add x15, x14, x15
9  => x"00f12223",  -- sw x15, 4(x2)
10 => x"00412783",  -- lw x15, 4(x2)
11 => x"00078513",  -- addi x10, x15, 0 (mv a0, a5)
12 => x"01010113",  -- addi x2, x2, 16
13 => x"00000067"   -- ret (return from the program)

--------------------------------------------

# Simple AUIPC demonstration for RISC-V32I
# This program stores a value at a memory location using PC-relative addressing

# Initialize registers
addi x1, x0, 0       # Clear x1
addi x2, x0, 42      # Put test value 42 in x2

# Use AUIPC to get a PC-relative address
auipc x3, 0          # x3 = PC + 0 (upper 20 bits are 0, so this is just the PC)

# Store the value at PC+16 (assuming 4-byte instructions)
sw x2, 16(x3)        # Store 42 at memory location PC+16

# Load the value back to verify
lw x4, 16(x3)        # Load from memory location PC+16 into x4

# If x4 equals 42, AUIPC worked correctly

0  => x"00000000",  -- NOP or unused
1  => x"00000093",  -- addi x1, x0, 0
2  => x"02a00113",  -- addi x2, x0, 42
3  => x"00000197",  -- auipc x3, 0
4  => x"0021a823",  -- sw x2, 16(x3)
5  => x"0101a203",  -- lw x4, 16(x3)
6  => x"00000000",  -- NOP or unused
7  => x"00000000",  -- NOP or unused
8  => x"00000000",  -- NOP or unused
9  => x"00000000",  -- NOP or unused
10 => x"00000000",  -- NOP or unused
11 => x"00000000",  -- NOP or unused
12 => x"00000000",  -- NOP or unused
13 => x"00000000"   -- NOP or unused
















