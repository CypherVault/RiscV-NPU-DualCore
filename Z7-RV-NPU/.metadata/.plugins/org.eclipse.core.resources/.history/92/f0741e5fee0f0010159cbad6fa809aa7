#include "cam_init.h"
#include <string.h>
#include "xuartps.h"
#include "xscugic.h"
#include "xil_exception.h"


#define INSTRUCTION_SIZE 32

// Define the missing constants

// Global variables for UART interrupt handling
static XUartPs UartPs;           // UART instance
static XScuGic IntcInstance;     // Interrupt controller instance
static volatile int UartRxComplete = 0;
static volatile int UartTxComplete = 0;
static volatile int UartError = 0;
static char UartRxBuffer[INSTRUCTION_SIZE * 8 + 3]; // S + payload + P + null terminator
static int UartRxBytes = 0;
static volatile int PayloadReceived = 0;

u8 *RdAddr;

void pipeline_mode_change(Resolution res, cam_mode_t mode)
{
	//Bring up input pipeline back-to-front
	{
		resetWrite(&axi_vdma);
		MIPI_CSI_2_RX_mWriteReg(XPAR_MIPI_CSI_2_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, (CR_RESET_MASK & ~CR_ENABLE_MASK));
		MIPI_D_PHY_RX_mWriteReg(XPAR_MIPI_D_PHY_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, (CR_RESET_MASK & ~CR_ENABLE_MASK));
		OV5640_reset();
	}

	{
		configureWrite(&axi_vdma,timing[res].h_active, timing[res].v_active);
		Xil_Out32(GAMMA_BASE_ADDR, 3); // Set Gamma correction factor to 1/1.8
		//TODO CSI-2, D-PHY config here
		OV5640_init();
	}

	{
		enableWrite(&axi_vdma);
		MIPI_CSI_2_RX_mWriteReg(XPAR_MIPI_CSI_2_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, CR_ENABLE_MASK);
		MIPI_D_PHY_RX_mWriteReg(XPAR_MIPI_D_PHY_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, CR_ENABLE_MASK);
		OV5640_set_mode(mode);
		OV5640_set_awb(AWB_ADVANCED);
	}

	//Bring up output pipeline back-to-front
	{
		reset();
		resetRead(&axi_vdma);
	}

	{
		configure(res);
		configureRead(&axi_vdma,timing[(int)res].h_active, timing[(int)res].v_active);
	}

	{
		enable();
		enableRead(&axi_vdma);
	}
}

void init_cam()
{

	PS_GPIO_Init(GPIO_DEVID);

	PS_IIC_init(CAM_I2C_DEVID, CAM_I2C_IRPT_ID, 100000);

	OV5640_init();

	axi_vdma_init(&axi_vdma,VDMA_DEVID, MEM_BASE_ADDR,
			VDMA_MM2S_IRPT_ID,
			VDMA_S2MM_IRPT_ID);

	VideoOutput(XPAR_VTC_0_DEVICE_ID, XPAR_VIDEO_DYNCLK_DEVICE_ID);

	pipeline_mode_change(R1920_1080_60_PP,MODE_1080P_1920_1080_30fps);
//	pipeline_mode_change(R1280_720_60_PP,MODE_720P_1280_720_60fps);
//    pipeline_mode_change(R640_480_60_NN,MODE_720P_1280_720_60fps);
	configure_interrupt_sys(VDMA_MM2S_IRPT_ID, VDMA_S2MM_IRPT_ID);
//	OV5640_set_isp_format(ISP_RGB);
	xil_printf("Video init done.\r\n");


	xil_printf("Hello from Riscv processor! ESE 441.\r\n");
}


// Function prototypes
static void UartHandler(void *CallBackRef, u32 Event, unsigned int EventData);


// out1: R, out2: G, out3: B
/**
 * UART Communication with RISC-V Instruction Buffer and Camera Control
 * For Xilinx Zynq 7000 using UART1
 */
//void read_cam_rgb(uint8_t * out1, uint8_t * out2, uint8_t * out3)
//{
//    int INSTRUCTIONCODE[INSTRUCTION_SIZE];
//    char choice;
//    char buffer[INSTRUCTION_SIZE * 8 + 16]; // Extra space for protocol overhead
//    int running = 1;
//    int camera_running = 0;
//    char c;
//    int idx;
//    char temp[9]; // 8 hex chars + null terminator
//    char* payload;
//    int i;
//    int Hsize_Max;
//    int Vsize_Max;
//    AXI_VDMA* vdma;
//    u32 k;
//    int y, x;
//    u32 index;
//    int Status;
//    u32 ReceivedCount = 0;
//    u32 ExpectedCount;
//    u32 timeout_counter;
//    const u32 TIMEOUT_MAX = 1000000; // Shorter timeout to prevent hanging
//    u8 sequence_number = 0;
//    u8 crc = 0;
//    int retry_count = 0;
//    const int MAX_RETRIES = 3;
//
//    // Initialize temp string terminator
//    temp[8] = '\0';
//
//
//    // Print startup message
//    xil_printf("\r\n\r\nInitializing UART communication...\r\n");
//
//    // Make sure we're using UART1, not UART0
//    // Ensure UART is in normal mode and set receive timeout
//    XUartPs_WriteReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_MR_OFFSET,
//                    (XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_MR_OFFSET) &
//                    ~XUARTPS_MR_CHMODE_MASK) | XUARTPS_MR_CHMODE_NORM);
//    XUartPs_WriteReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_RXTOUT_OFFSET, 8);
//
//    // Verify UART is correctly configured
//    if ((XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_MR_OFFSET) &
//        XUARTPS_MR_CHMODE_MASK) != XUARTPS_MR_CHMODE_NORM) {
//        xil_printf("ERROR: Failed to set UART to normal mode\r\n");
//        return;
//    }
//
//    // Flush any existing data in the receive buffer with timeout
//    xil_printf("Flushing UART receive buffer...\r\n");
//    timeout_counter = 0;
//    while ((XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_SR_OFFSET) &
//           XUARTPS_SR_RXEMPTY) == 0) {
//        XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_FIFO_OFFSET);
//        timeout_counter++;
//        if (timeout_counter > 1000) { // Short timeout for flush
//            break;
//        }
//    }
//
//
//
//
//xil_printf("UART initialization complete\r\n");
//
//    while(running) {
//        if (!camera_running) {
//            xil_printf("\r\n\r\n\r\nPcam 5C MAIN OPTIONS\r\n");
//            xil_printf("1. Run RISCV instructions\r\n");
//            xil_printf("2. Use AI camera\r\n");
//            xil_printf("3. Exit program\r\n");
//            xil_printf("Enter your choice (1-3): ");
//
//            // Read a single character for menu selection with timeout
//            timeout_counter = 0;
//            choice = 0; // Initialize to invalid value
//
//            while (!XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                timeout_counter++;
//                usleep(100); // Small delay to prevent tight loop
//                if (timeout_counter > TIMEOUT_MAX / 10) { // Shorter timeout for menu
//                    xil_printf("\r\nTimeout waiting for input. Please try again.\r\n");
//                    break;
//                }
//            }
//
//            if (XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                choice = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);
//                xil_printf("%c\r\n", choice);
//            }
//
//            switch(choice) {
//                case '1': {
//                    xil_printf("\r\nPLEASE SEND payload (format: S<hex data>P)\r\n");
//                    xil_printf("Waiting for start character 'S'...\r\n");
//
//                    // Read the payload
//                    memset(buffer, 0, sizeof(buffer));
//                    idx = 0;
//                    retry_count = 0;
//
//                    // Calculate expected payload size (S + INSTRUCTION_SIZE*8 hex chars + P)
//                    ExpectedCount = INSTRUCTION_SIZE * 8 + 2;
//
//                    // Clear any UART errors before starting
//                    u32 status_reg = XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_SR_OFFSET);
//                    if (status_reg & (XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING | XUARTPS_IXR_OVER)) {
//                        // Clear error flags by reading the status register
//                        xil_printf("Detected UART error flags\r\n");
//                    }
//
//payload_retry:
//                    if (retry_count > 0) {
//                        xil_printf("\r\nRetrying payload reception (attempt %d of %d)...\r\n",
//                                  retry_count, MAX_RETRIES);
//                    }
//
//                    // Wait for start character 'S' with timeout
//                    timeout_counter = 0;
//                    idx = 0;
//                    while (1) {
//                        if (XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                            c = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);
//                            if (c == 'S') {
//                                buffer[idx++] = c;
//                                xil_printf("Start character received. Waiting for payload...\r\n");
//                                break;
//                            }
//                        }
//
//                        timeout_counter++;
//                        usleep(100); // Small delay to prevent tight loop
//                        if (timeout_counter > TIMEOUT_MAX) {
//                            if (retry_count < MAX_RETRIES) {
//                                retry_count++;
//                                xil_printf("\r\nTimeout waiting for start character. Retrying...\r\n");
//                                goto payload_retry;
//                            } else {
//                                xil_printf("\r\nMax retries exceeded. Aborting payload reception.\r\n");
//                                goto menu_restart;
//                            }
//                        }
//                    }
//
//                    // Read the rest of the payload with timeout
//                    ReceivedCount = 1; // We already received 'S'
//                    timeout_counter = 0;
//
//                    xil_printf("Receiving payload data...\r\n");
//
//                    while (ReceivedCount < ExpectedCount) {
//                        // Check for UART errors
//                        status_reg = XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR, XUARTPS_SR_OFFSET);
//                        if (status_reg & (XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING | XUARTPS_IXR_OVER)) {
//                            if (retry_count < MAX_RETRIES) {
//                                retry_count++;
//                                xil_printf("\r\nUART error detected. Retrying payload reception.\r\n");
//                                goto payload_retry;
//                            } else {
//                                xil_printf("\r\nMax retries exceeded. Aborting payload reception.\r\n");
//                                goto menu_restart;
//                            }
//                        }
//
//                        if (XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                            c = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);
//
//                            // Print progress indicator
//                            if (ReceivedCount % 100 == 0) {
//                                xil_printf(".");
//                            }
//
//                            buffer[idx++] = c;
//                            ReceivedCount++;
//                            timeout_counter = 0; // Reset timeout counter on successful read
//
//                            // Check for end character 'P'
//                            if (c == 'P' && ReceivedCount >= (INSTRUCTION_SIZE * 8 + 1)) {
//                                xil_printf("\r\nEnd character 'P' received. Processing payload...\r\n");
//                                break;
//                            }
//                        } else {
//                            timeout_counter++;
//                            usleep(100); // Small delay to prevent tight loop
//                            if (timeout_counter > TIMEOUT_MAX) {
//                                if (retry_count < MAX_RETRIES) {
//                                    retry_count++;
//                                    xil_printf("\r\nTimeout waiting for complete payload. Retrying...\r\n");
//                                    goto payload_retry;
//                                } else {
//                                    xil_printf("\r\nMax retries exceeded. Aborting payload reception.\r\n");
//                                    goto menu_restart;
//                                }
//                            }
//                        }
//                    }
//                    buffer[idx] = '\0';
//
//                    // Check if payload starts with 'S' and ends with 'P'
//                    if (buffer[0] == 'S' && buffer[idx-1] == 'P') {
//                        // Parse the payload (INSTRUCTION_SIZE 32-bit values in hex)
//                        payload = buffer + 1; // Skip the 'S'
//
//                        // Null-terminate the payload by replacing 'P'
//                        payload[idx-2] = '\0';
//
//                        // Calculate simple checksum for validation
//                        crc = 0;
//                        for (i = 0; i < idx-2; i++) {
//                            crc ^= payload[i];
//                        }
//
//                        xil_printf("Parsing %d instructions...\r\n", INSTRUCTION_SIZE);
//
//                        for (i = 0; i < INSTRUCTION_SIZE; i++) {
//                            if ((i * 8) + 8 <= idx - 2) { // Make sure we don't read past the buffer
//                                strncpy(temp, payload + (i * 8), 8);
//                                temp[8] = '\0'; // Ensure null termination
//                                if (sscanf(temp, "%x", &INSTRUCTIONCODE[i]) != 1) {
//                                    xil_printf("Error parsing instruction %d: '%s'\r\n", i+1, temp);
//                                    INSTRUCTIONCODE[i] = 0;
//                                }
//                            } else {
//                                xil_printf("Warning: Instruction %d is incomplete\r\n", i+1);
//                                INSTRUCTIONCODE[i] = 0;
//                            }
//                        }
//
//                        // Print out the instruction buffer (just first 10 for brevity)
//                        xil_printf("\r\nInstruction Buffer Contents (first 10):\r\n");
//                        for (i = 0; i < 32 && i < INSTRUCTION_SIZE; i++) {
//                            xil_printf("%3d: 0x%08X\r\n", i+1, INSTRUCTIONCODE[i]);
//                        }
//                        xil_printf("... (total %d instructions)\r\n", INSTRUCTION_SIZE);
//                        xil_printf("Payload CRC: 0x%02X\r\n", crc);
//
//                        xil_printf("\r\nRunning the processor...\r\n");
//
//                        // Here you would add code to execute the RISCV instructions
//                        // using the INSTRUCTIONCODE array
//
//                        xil_printf("\r\nProcessor execution completed.\r\n");
//
//                        // Send ACK to indicate successful processing
//                        XUartPs_SendByte(XPAR_PS7_UART_1_BASEADDR, 'A');
//                    } else {
//                        xil_printf("\r\nInvalid payload format. Expected 'S[payload]P'\r\n");
//                        xil_printf("Received: %c...%c\r\n", buffer[0], buffer[idx-1]);
//
//                        // Send NACK to indicate failure
//                        XUartPs_SendByte(XPAR_PS7_UART_1_BASEADDR, 'N');
//                    }
//                    break;
//                }
//
//                case '2': {
//                    camera_running = 1;
//                    xil_printf("\r\nStarting AI camera...\r\n");
//                    break;
//                }
//
//                case '3': {
//                    xil_printf("\r\nExiting program...\r\n");
//                    running = 0;
//                    break;
//                }
//
//                default: {
//                    xil_printf("\r\nInvalid choice. Please try again.\r\n");
//                    break;
//                }
//            }
//
//menu_restart:
//            // This label is used for error conditions to restart the menu
//            continue;
//        } else {
//            // Camera operations start here
//            if(frame_received)
//            {
//                vdma = &axi_vdma;
//                RdAddr = (u8 *)vdma->context.ReadCfg.FrameStoreStartAddr[xaxivdma_dvr.MaxNumFrames - 1];
//
//                Hsize_Max = vdma->context.ReadCfg.HoriSizeInput;
//                Vsize_Max = vdma->context.ReadCfg.VertSizeInput;
//
//                Xil_DCacheInvalidateRange((UINTPTR)RdAddr, Hsize_Max * Vsize_Max);
//                k = 0;
//
//                for (y = 0; y < (int)Vsize_Max; y++) {
//                    for (x = 0; x < (int)(Hsize_Max/3); x++) {
//                        // Calculate the index of the current pixel in the image buffer
//                        index = (y * (Hsize_Max/3) + x) * 3;
//
//                        // Assign Red, Green, and Blue values to their respective buffers
//                        out3[k] = RdAddr[index];     // B
//                        out2[k] = RdAddr[index + 1]; // G
//                        out1[k] = RdAddr[index + 2]; // R
//
//                        k++;
//                    }
//                }
//
//                frame_received = 0;
//                usleep(50000);
//
//                xil_printf("\r\nFrame processed.\r\n");
//            }
//            else {
//                xil_printf("FRAME NOT RECEIVED!.\r\n");
//            }
//
//            // After camera operations, ask if user wants to continue
//            xil_printf("\r\nKeep running the camera? (Y/N): ");
//
//            // Read with timeout
//            timeout_counter = 0;
//            choice = 0; // Initialize to invalid value
//
//            while (!XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                timeout_counter++;
//                usleep(100); // Small delay to prevent tight loop
//                if (timeout_counter > TIMEOUT_MAX / 10) { // Shorter timeout for menu
//                    xil_printf("\r\nTimeout waiting for input. Assuming Yes.\r\n");
//                    choice = 'Y';
//                    goto process_camera_choice;
//                }
//            }
//
//            if (XUartPs_IsReceiveData(XPAR_PS7_UART_1_BASEADDR)) {
//                choice = XUartPs_RecvByte(XPAR_PS7_UART_1_BASEADDR);
//                xil_printf("%c\r\n", choice);
//            }
//
//process_camera_choice:
//            if (choice == 'N' || choice == 'n') {
//                camera_running = 0;
//                xil_printf("\r\nReturning to main menu...\r\n");
//            } else if (choice == 'Y' || choice == 'y') {
//                xil_printf("\r\nContinuing camera operation...\r\n");
//            } else {
//                xil_printf("\r\nInvalid choice. Assuming Yes.\r\n");
//            }
//        }
//    }
//}

// out1: R, out2: G, out3: B
void read_cam_rgb(uint8_t * out1, uint8_t * out2, uint8_t * out3)
{





	int Hsize_Max;
	int Vsize_Max;


	AXI_VDMA* vdma;
	if(frame_received)
	{
		vdma = &axi_vdma;
		RdAddr = (u8 *)vdma->context.ReadCfg.FrameStoreStartAddr[ xaxivdma_dvr.MaxNumFrames - 1];

		Hsize_Max = vdma->context.ReadCfg.HoriSizeInput;
		Vsize_Max = vdma->context.ReadCfg.VertSizeInput;

		Xil_DCacheInvalidateRange((UINTPTR)RdAddr, Hsize_Max * Vsize_Max);
		u32 k = 0;

		  for (u32 y = 0; y < Vsize_Max; y++) {
			 for (u32 x = 0; x < Hsize_Max/3; x++) {
				 // Calculate the index of the current pixel in the image buffer
				 u32 index = (y * Hsize_Max/3 + x) * 3;

				 // Assign Red, Green, and Blue values to their respective buffers

				 out3[k] = RdAddr[index]; // B
				 out2[k] = RdAddr[index + 1]; // G
				 out1[k] = RdAddr[index + 2]; // R

				 k++;

			 }
		 }

		frame_received = 0;
		usleep(50000);
	}


}




